; OM File Header - Saved 2021/12/06 12:39:34
; (6.2 :patc (om-make-point 209 98) (om-make-point 3742 139) (om-make-point 1367 995) "" 183 0 nil "2021/12/06 12:39:33")
; End File Header
; External resources 
; (list (list (quote :sdif) "#P\"../../mmm.sdif\""))
(in-package :om)(load-lib-for (quote ("Repmus")))(setf *om-current-persistent* (om-load-patch1 "sound-analysis-3-partial-tracking" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 231 620) (om-make-point 34 30) 20 "20" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 268 620) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 20) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 100))) (om-make-point 207 656) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 7 739) (om-make-point 634 166) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4414) (5528) (6378) (4976) (6514) (5950) (5726) (6208) (6010) (4934) (6004) (6194) (5366) (5714) (5146) (6266) (4862) (4498) (4960) (4724) (4240) (5472) (5134) (6544) (5708) (6348) (5726) (4106) (5714) (4834) (7310) (5144) (6166) (5526) (5938) (5660) (6466) (6284) (4734) (3928) (5658) (7110) (6942) (6292) (7264) (6512) (6092) (5926) (5386) (7456) (5840) (4404) (5558) (6174) (4308) (12246) (12044) (11966) (12222) (12148) (12018) (12006) (5138) (6272) (5920) (5286) (4138) (7302) (9466) (6508) (5798) (5166) (9498) (9436) (9828) (5922) (9374) (6398) (7422) (5762) (6554) (4820) (5972) (6312) (5614) (6130) (5766) (4622) (6428) (5424) (5650) (3890) (5542) (6086) (7148) (6190) (5936) (6976) (6618) (4910) (7360) (5782) (6782) (7416) (7168) (7052) (5130) (7360) (6620) (6366) (4524) (6956) (5818) (6184) (6680) (6564) (7248) (6730) (7454) (7140) (5466) (7520) (7024) (9866) (7782) (7528) (7942) (7876) (7502) (7330) (7248) (6688) (8008) (8282) (8122) (10242) (9372) (8388) (8198) (9178) (10306) (7888) (6752) (8010) (7836) (9636) (8080) (9586) (8712) (8190) (7500) (7126) (7054) (8262) (7274) (5654) (4344) (9682) (7808) (6262) (7226) (6302) (7396) (7590) (7458) (6284) (5956) (5120) (6480) (5504) (7068) (6360) (6126) (7522) (7378) (7082) (7228) (6790) (7814) (7714) (7480) (5592) (5400) (7910) (6104) (4710) (9510) (7588) (4246) (5512) (12616) (12596) (12514) (12478) (12640) (12606) (12580) (12572) (12542) (12452) (12436) (12428) (12412) (12404) (12366) (12648) (12558) (12396) (12374) (12346) (12566) (12356) (12330) (12324) (12316) (12496) (12440) (12422) (12388) (12368) (12360) (12342) (12300) (4754) (12466) (12458) (12432) (12382) (12478) (12416) (12504) (5548) (6664) (6368) (4392) (7206) (5618) (6014) (5810) (8932) (6838) (6176) (5230) (4830) (6216) (5206) (4616) (5972) (4382) (5512) (7028) (6226) (7172) (7256) (7050) (7840) (9572) (9600) (8970) (7600) (9392) (9056) (9064) (7962) (7894) (6618) (9164) (7418) (9260) (9138) (9118) (9214) (8070) (9298) (8166) (9378) (9080) (9310) (9128) (7458) (7340) (9016) (8250) (8930) (10810) (7038) (8526) (9256) (8426) (8210) (7098) (7346) (7278) (6912) (5752) (7496) (6600) (5830) (6654) (5432) (6016) (7240) (6862) (5732) (4754) (10770) (10704) (6200) (6614) (7354) (7218) (4388) (7542) (6424) (9182) (8976) (8894) (7144) (9096) (9814) (3970) (6054) (3456) (12432) (12540) (12508) (12486) (12468) (12460) (12454) (12448) (12438) (12406) (12404) (12390) (12376) (12376) (12366) (12354) (12342) (12328) (12270) (12518) (12476) (12424) (12360) (12318) (12302) (12250) (12336) (12260) (12278) (12240) (12218) (12206) (12410) (12348) (12226) (12618) (12600) (12470) (12418) (12544) (12484) (12440) (12460) (12370) (12290) (12578) (12570) (12452) (12376) (12334) (12250) (12496) (12440) (12420) (12262) (5694) (4658) (3772) (5418) (4948) (6362) (5318) (4192) (3464) (6276) (5992) (5430) (5718) (5416) (7772) (7434) (7278) (7178) (6982) (6658) (6452) (6316) (4426) (5452) (6880) (7302) (6438) (5480) (5104) (7128) (4014) (6320) (6850) (4708) (5234) (6226) (5986) (7000) (6778) (5226) (4598) (5898) (5054) (6126) (4532) (5764) (5242) (6244) (6524) (5642) (4604) (6484) (6236) (5480) (6294) (4744) (5154) (5982) (5208) (6504) (5798) (7430) (6982) (5230) (7508) (8154) (9398) (9194) (8562) (8416) (8228) (10380) (9280) (9266) (7366) (9334) (7534) (9426) (9166) (9130) (8726) (9346) (9310))) :lonset (quote (38 50 250 250 262 275 287 412 488 613 625 637 762 887 887 900 938 1000 1200 1200 1200 1212 1225 1237 1237 1250 1312 1400 1425 1475 1575 1612 1638 1675 1712 1725 1737 1737 1875 1875 1888 1900 1900 1900 1913 1913 1913 1925 1925 1938 2037 2100 2125 2287 2325 2362 2362 2362 2375 2375 2388 2400 2412 2450 2450 2450 2450 2487 2513 2525 2562 2575 2737 2737 2763 2763 2775 2800 2812 2838 2850 2850 2862 2975 3000 3025 3025 3037 3075 3075 3188 3350 3400 3425 3438 3438 3475 3500 3500 3500 3513 3513 3600 3612 3612 3612 3612 3625 3625 3625 3638 3650 3700 3737 3750 3750 3763 3763 3775 3775 3775 3812 3812 3862 3925 3925 3938 3938 3938 3938 3938 3938 3950 3963 3963 3975 3987 3987 3987 4000 4012 4125 4125 4137 4137 4150 4150 4162 4162 4162 4175 4175 4175 4188 4188 4188 4188 4200 4200 4200 4225 4238 4300 4325 4325 4325 4325 4338 4363 4387 4425 4425 4425 4438 4438 4438 4463 4475 4500 4500 4500 4500 4500 4525 4550 4550 4562 4562 4613 4762 4775 4775 4775 4775 4787 4787 4787 4787 4787 4787 4787 4787 4787 4787 4787 4800 4800 4800 4800 4800 4812 4812 4812 4812 4812 4825 4825 4825 4825 4838 4850 4850 4850 4850 4863 4863 4863 4863 4900 4912 4925 4963 4975 4975 4975 4988 4988 5000 5000 5012 5012 5012 5025 5025 5150 5150 5150 5162 5325 5338 5350 5350 5575 5588 5588 5613 5637 5650 5662 5662 5675 5675 5675 5675 5675 5675 5688 5688 5700 5713 5725 5750 5775 5787 5787 5812 5812 5825 5875 5875 5912 6062 6075 6088 6113 6113 6238 6250 6338 6363 6400 6425 6425 6450 6475 6500 6500 6525 6537 6537 6588 6625 6625 6662 6700 6713 6713 6725 6738 6750 6750 6750 6762 6762 6775 6775 6775 6775 6787 6800 6838 6850 6850 6925 6938 6938 6938 6938 6938 6938 6938 6938 6938 6938 6938 6938 6938 6938 6938 6938 6938 6938 6950 6950 6950 6950 6950 6950 6950 6963 6963 6975 6975 6975 6975 6988 7000 7012 7025 7025 7025 7025 7037 7037 7037 7050 7050 7050 7062 7062 7062 7062 7062 7062 7075 7075 7075 7125 7125 7137 7150 7162 7162 7188 7338 7350 7363 7550 7625 7625 7637 7637 7650 7650 7650 7650 7650 7650 7650 7650 7662 7700 7762 7787 7800 7800 7812 7825 7825 7850 7863 8050 8062 8087 8100 8113 8113 8325 8337 8375 8525 8562 8562 8637 8663 8712 8738 8762 8837 8900 8900 9038 9050 9113 9175 9188 9212 9250 9325 9363 9363 9363 9375 9387 9413 9413 9413 9413 9413 9425 9425 9438 9438 9462 9475 9488 9512 9512 9550 9637 9663 9738)) :ldur (quote ((988) (150) (200) (287) (50) (62) (487) (100) (37) (100) (113) (75) (275) (125) (87) (62) (100) (38) (600) (237) (100) (100) (125) (100) (563) (150) (75) (125) (38) (350) (38) (63) (50) (63) (50) (50) (38) (63) (325) (75) (200) (75) (38) (275) (50) (275) (325) (50) (100) (38) (163) (113) (62) (63) (950) (38) (50) (50) (38) (38) (37) (37) (50) (188) (275) (275) (50) (75) (37) (87) (88) (588) (50) (50) (37) (150) (37) (113) (38) (37) (38) (100) (413) (163) (112) (250) (62) (100) (37) (62) (62) (50) (625) (263) (100) (587) (88) (62) (62) (75) (37) (62) (113) (75) (88) (88) (412) (38) (88) (438) (387) (50) (37) (88) (100) (337) (100) (500) (87) (275) (50) (38) (88) (38) (62) (62) (112) (150) (112) (137) (75) (75) (37) (50) (75) (37) (37) (50) (37) (37) (50) (137) (125) (113) (37) (62) (87) (62) (50) (50) (100) (50) (87) (50) (325) (75) (75) (37) (62) (425) (62) (37) (87) (37) (37) (338) (338) (362) (100) (62) (225) (37) (75) (188) (225) (37) (175) (175) (87) (112) (100) (188) (75) (50) (75) (175) (62) (37) (87) (88) (62) (87) (50) (62) (37) (50) (50) (112) (125) (200) (175) (62) (200) (175) (200) (37) (87) (175) (112) (137) (37) (188) (37) (87) (87) (37) (88) (162) (162) (37) (112) (62) (62) (50) (125) (100) (112) (137) (75) (62) (37) (287) (75) (75) (287) (50) (37) (75) (75) (37) (37) (37) (62) (75) (87) (100) (75) (88) (150) (75) (37) (50) (50) (37) (37) (300) (50) (37) (62) (50) (50) (37) (250) (112) (112) (125) (212) (62) (188) (125) (37) (87) (125) (50) (112) (62) (62) (50) (37) (75) (50) (37) (137) (100) (37) (737) (137) (37) (37) (75) (75) (62) (62) (100) (487) (87) (325) (87) (50) (275) (312) (75) (87) (37) (225) (37) (37) (188) (150) (37) (87) (62) (62) (62) (50) (50) (37) (50) (50) (37) (62) (37) (37) (212) (37) (37) (62) (37) (62) (200) (87) (50) (212) (37) (212) (200) (62) (75) (212) (200) (162) (62) (37) (150) (37) (188) (175) (75) (50) (75) (62) (125) (37) (88) (88) (75) (100) (37) (37) (100) (50) (125) (50) (75) (88) (50) (37) (50) (37) (62) (50) (50) (100) (62) (62) (37) (62) (37) (287) (287) (50) (62) (88) (200) (62) (100) (87) (62) (287) (275) (150) (50) (37) (62) (37) (50) (37) (37) (262) (75) (88) (62) (50) (75) (112) (87) (112) (88) (100) (50) (37) (150) (125) (62) (37) (50) (37) (100) (100) (37) (738) (688) (100) (75) (387) (300) (100) (62) (38) (175) (50) (100) (112) (175) (112) (62) (38) (162) (113) (375) (112) (75) (62) (50) (50) (50) (87) (62) (37) (50) (87) (75) (37) (62) (50) (100) (50) (50) (50) (38) (62))) :lvel (quote ((52) (33) (33) (42) (31) (27) (33) (32) (27) (42) (30) (31) (39) (26) (45) (27) (46) (24) (42) (62) (48) (39) (30) (23) (29) (25) (24) (47) (21) (45) (20) (24) (23) (25) (25) (23) (22) (26) (52) (37) (44) (25) (23) (45) (22) (40) (49) (42) (39) (24) (48) (30) (27) (24) (54) (22) (21) (22) (21) (21) (23) (24) (27) (36) (30) (50) (33) (27) (23) (26) (40) (46) (22) (22) (23) (39) (24) (31) (20) (36) (25) (43) (40) (31) (38) (35) (30) (40) (28) (25) (26) (26) (59) (29) (29) (34) (35) (31) (25) (54) (24) (37) (33) (25) (40) (33) (43) (23) (41) (45) (49) (34) (24) (33) (31) (47) (36) (46) (29) (30) (27) (24) (32) (22) (23) (27) (29) (30) (35) (26) (24) (33) (23) (23) (29) (22) (23) (24) (23) (23) (24) (29) (65) (56) (25) (30) (35) (29) (25) (29) (29) (27) (26) (25) (30) (27) (28) (23) (26) (50) (25) (30) (29) (23) (25) (45) (35) (50) (25) (31) (44) (32) (42) (30) (27) (25) (49) (29) (28) (31) (26) (64) (30) (26) (29) (46) (24) (26) (35) (24) (27) (28) (26) (29) (22) (25) (27) (26) (24) (29) (28) (27) (28) (29) (28) (23) (23) (30) (30) (26) (25) (27) (23) (31) (30) (23) (27) (29) (31) (27) (25) (24) (24) (25) (25) (28) (25) (32) (27) (27) (22) (37) (34) (30) (62) (24) (38) (28) (39) (23) (24) (29) (31) (30) (30) (38) (50) (27) (57) (31) (23) (25) (24) (25) (22) (49) (24) (25) (24) (31) (23) (29) (40) (51) (51) (28) (42) (25) (35) (65) (49) (35) (42) (34) (70) (29) (24) (26) (29) (25) (27) (24) (60) (82) (23) (47) (100) (27) (40) (50) (39) (31) (36) (26) (52) (27) (34) (30) (26) (36) (31) (24) (32) (48) (53) (23) (22) (31) (35) (23) (28) (34) (29) (27) (26) (25) (22) (25) (23) (22) (31) (32) (23) (32) (25) (26) (29) (25) (27) (33) (30) (26) (30) (36) (31) (31) (38) (33) (35) (33) (29) (28) (24) (30) (31) (30) (28) (28) (24) (33) (25) (27) (27) (24) (25) (26) (28) (24) (23) (26) (26) (31) (26) (28) (31) (26) (24) (25) (23) (24) (24) (24) (27) (27) (24) (33) (24) (24) (44) (63) (24) (27) (41) (30) (27) (27) (32) (36) (29) (44) (42) (60) (23) (31) (27) (26) (24) (23) (28) (23) (39) (24) (28) (27) (30) (45) (45) (28) (48) (34) (26) (43) (50) (26) (24) (24) (22) (31) (32) (23) (57) (39) (35) (31) (58) (35) (25) (24) (35) (38) (31) (38) (27) (32) (28) (33) (23) (25) (25) (46) (30) (46) (31) (27) (24) (25) (38) (26) (22) (24) (40) (30) (62) (25) (40) (26) (23) (24) (22) (23) (26))) :loffset (quotelchan (quotelegato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 397 301) (om-make-point 700 312) 0 1000 nil 1 (quote :osc-scoreplayer) 0 nil (om-make-point 0 7) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 4) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 16)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SEC->MS" (quote sec->ms) (quote ((om-load-inputfun (quote input-funbox) "seconds" "N" 0))) (om-make-point 137 654) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SEC->MS 2" (quote sec->ms) (quote ((om-load-inputfun (quote input-funbox) "seconds" "N" 0))) (om-make-point 78 668) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "F->MC" (quote f->mc) (quote ((om-load-inputfun (quote input-funbox) "frequency (Hz)" "FREQ" 440))) (om-make-point 53 614) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 60 536) nil nil "&" nil 4))) (setf (numouts box) 4) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 70 461) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 300)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 200)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 699 759) (om-make-point 493 109) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4400) (5000) (6400) (5700) (5500) (6200) (6500) (6000) (6000) (4900) (6300) (4500) (5400) (5100) (4100) (5000) (4800) (5500) (4700) (4200) (5400) (4400) (5800) (5900) (6100) (6500) (5300) (4300) (5200) (5100) (7300) (4100) (6000) (6400) (4600) (4800) (5600) (6100) (5500) (6600) (5100) (4900) (4500) (6700) (7200) (6800) (6300) (6700) (7300) (6000) (7500) (7200) (6400) (6100) (5600) (7100) (7700) (4700) (4200) (6200) (4600) (6700) (4400) (5800) (5500) (5200) (6600) (7200) (7300) (7400) (7500) (7600) (7800) (7900) (8000) (7100) (7000) (6000) (5800) (5400) (5700) (6100) (7200) (6200) (6900) (6400) (4800) (4400) (6300) (4700) (4200) (5400) (5300) (4900) (7400) (4400) (5500) (5200) (5100) (4000) (5800) (6200) (4500) (4600) (5600) (6100) (6500) (4700) (5500) (6000) (6300) (7000) (7400) (7500))) :lonset (quote (0 0 0 0 0 0 0 0 0 1200 1500 1800 2100 2400 3000 3900 4200 4800 5400 5700 6900 7200 7500 7800 8100 8700 10200 10500 10800 11100 11400 11700 12600 12900 13200 13500 13800 14400 15300 15900 16500 16800 17100 17400 17700 18300 18900 19200 19500 20100 20700 21600 21900 22200 22500 22800 23100 23400 23700 24300 24600 24900 25200 25500 25800 26400 27000 27300 27600 28200 28500 28800 29100 29400 29700 31200 31500 31800 32100 32700 33300 33600 34200 34500 34800 35100 35400 35700 36600 36900 37200 37500 37800 38100 39000 39300 40500 41100 41400 41700 42300 42900 43200 43500 43800 44400 44700 46200 46800 47100 47400 48300 48600 49200 53600)) :ldur (quote ((1800) (1200) (2100) (11100) (2400) (5100) (2700) (300) (6900) (4200) (15900) (3600) (2700) (6000) (5700) (4200) (3000) (4500) (6300) (2100) (3900) (3300) (14100) (4800) (3300) (4200) (3600) (2700) (3300) (2400) (3300) (2700) (4800) (7500) (3900) (3300) (2700) (3300) (7200) (6900) (7200) (3600) (3600) (900) (1800) (6600) (7800) (3900) (2100) (3300) (5700) (4500) (3600) (2100) (5400) (3000) (3600) (1200) (1500) (3000) (4500) (2100) (7200) (2100) (4800) (2400) (10800) (4200) (13800) (3000) (9900) (3000) (3000) (3000) (3000) (3600) (3900) (1800) (3300) (3000) (9000) (3900) (4500) (2100) (3300) (5400) (1500) (1500) (6300) (6600) (4500) (6600) (3300) (3300) (5700) (3900) (3300) (12500) (5700) (2700) (7200) (7200) (3000) (7200) (3900) (3000) (5400) (2700) (1500) (2700) (3000) (2600) (4300) (3100))) :lvel (quoteloffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 -6) nil 0 (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 22) 0 1 (quote :normal) (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 810 623) (om-make-point 28 34) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHSEQ->POLY" (quote chseq->poly) (quote ((om-load-inputfun (quote input-funbox) "" "CHSEQ" nil) (om-load-inputfun (quote input-funbox) "" "APPROX" 2))) (om-make-point 768 663) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 901 406) (om-make-point 66 34) (list 0 300) "(0 300)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 300)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 200)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 708 496) (om-make-point 426 126) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4414 4976 6378 5726 5528 6208 6514 6010 5950) (4414 4976 5528 5726 5950 6004 6208 6378 6514) (4414 4976 5528 5714 5950 6004 6208 6378 6514) (4414 4976 5528 5714 5950 6004 6194 6378 6514) (4414 4934 5528 5714 5950 6004 6194 6378 6514) (4414 4934 5528 5714 6004 6194 6266 6378 6514) (4498 4934 5528 5714 6004 6194 6266 6378 6514) (4498 4934 5366 5528 5714 6004 6194 6266 6514) (4498 4934 5146 5366 5714 6004 6194 6266 6514) (4498 4862 4934 5146 5366 5714 6004 6194 6266) (4106 4498 4862 4934 5146 5366 5714 6004 6194 6266) (4106 4498 4862 4934 5146 5366 5708 6004 6194 6266) (4106 4498 4862 4934 5134 5366 5708 6004 6194 6266) (4106 4498 4862 4960 5134 5366 5708 6004 6194 6266) (4106 4498 4834 4960 5134 5366 5708 6004 6194 6266) (4106 4498 4834 4960 5134 5366 5708 6004 6194 6348) (4106 4498 4834 4960 5134 5472 5708 6004 6194 6348) (4106 4498 4834 4960 5134 5472 5526 5708 6004 6348) (4106 4724 4834 4960 5134 5472 5526 5708 6004 6348) (4106 4240 4724 4834 4960 5134 5472 5526 5708 6348) (4106 4240 4734 4834 4960 5134 5472 5526 5708 6348) (4106 4240 4734 4834 4960 5134 5472 5526 5658 6348) (4106 4240 4734 4834 4960 5134 5472 5526 5658 6292) (4106 4240 4734 4834 4960 5134 5386 5526 5658 6292) (4106 4240 4404 4734 4960 5134 5386 5526 5658 6292) (4106 4240 4404 4734 4960 5134 5386 5658 5840 6292) (4106 4404 4734 4960 5134 5386 5658 5840 5926 6292) (4106 4404 4734 5134 5386 5658 5840 5926 6092 6292) (4106 4404 4734 5386 5658 5840 5926 6092 6284 6292) (4404 4734 5386 5658 5840 5926 6092 6284 6292 6512) (4404 4734 5386 5658 5840 5926 6092 6284 6292 6508) (4404 4734 5386 5658 5840 5920 6092 6284 6292 6508) (4404 4734 5386 5658 5840 5920 6092 6272 6292 6508) (4404 4734 5386 5658 5798 5840 5920 6092 6272 6508) (4404 4734 5286 5386 5658 5798 5920 6092 6272 6508) (4308 4734 5286 5386 5658 5798 5920 6092 6272 6508) (4308 4734 5166 5286 5658 5798 5920 6092 6272 6508) (4308 4734 5138 5166 5286 5798 5920 6092 6272 6508) (4308 4734 5138 5166 5286 5798 5920 6272 6508 7302) (4138 4308 5138 5166 5286 5798 5920 6272 6508 7302) (4138 4308 5138 5166 5286 5766 5920 6272 6508 7302) (4138 4308 5138 5166 5286 5766 5920 6312 6508 7302) (4138 4308 5138 5166 5286 5766 5972 6312 6508 7302) (4138 4308 5138 5166 5286 5766 5972 6312 6428 7302) (4138 4622 5138 5166 5286 5766 5972 6312 6428 7302) (4138 4622 4820 5166 5286 5766 5972 6312 6428 7302) (4138 4622 4820 5166 5614 5766 5972 6312 6428 7302) (4138 4622 4820 5614 5762 5766 5972 6312 6428 7302) (4622 4820 5614 5762 5766 5972 6130 6312 6428 7302) (4622 4820 5614 5762 5766 5972 6130 6312 6398 6428) (4622 4820 5614 5762 5782 5972 6130 6312 6398 6428) (4622 4820 5542 5614 5782 5972 6130 6312 6398 6428) (4622 4820 5542 5614 5782 5972 6130 6312 6366 6428) (4622 4820 5542 5614 5782 5972 6130 6366 6428 6564) (4622 4820 5542 5614 5782 5972 6130 6366 6564 6618) (4622 4820 5130 5542 5782 5972 6130 6366 6564 6618) (4622 4910 5130 5542 5782 5972 6130 6366 6564 6618) (4524 4910 5130 5542 5782 5972 6130 6366 6564 6618) (4524 4910 5130 5542 5782 6130 6366 6564 6618 6730) (4524 4910 5130 5542 5782 6366 6564 6618 6730 7168) (4524 4910 5120 5542 5782 6366 6564 6618 6730 7168) (4524 4910 5120 5542 5782 6366 6564 6618 6752 7168) (4524 4910 5120 5504 5782 6366 6564 6618 6752 7168) (4524 4910 5120 5504 5782 6302 6564 6618 6752 7168) (4524 4910 5120 5504 5782 6302 6564 6688 6752 7168) (4524 4910 5120 5504 5782 6302 6564 6688 6752 7274) (4524 4910 5120 5504 5782 6284 6302 6688 6752 7274) (4524 4910 5120 5504 5956 6284 6302 6688 6752 7274) (4524 5120 5504 5956 6262 6284 6302 6688 6752 7274) (5120 5504 5956 6262 6284 6302 6688 6752 7274 7500) (5120 5504 5956 6262 6284 6302 6688 6752 7274 7522) (5120 5504 5956 6262 6284 6302 6688 6790 7274 7522) (5120 5504 5956 6262 6284 6302 6688 6790 7228 7522) (5120 5504 5956 6262 6284 6360 6688 6790 7228 7522) (5120 5504 5956 6126 6262 6360 6688 6790 7228 7522) (5120 5592 5956 6126 6262 6360 6688 6790 7228 7522) (5120 5592 5956 6126 6360 6688 6790 7068 7228 7522) (5120 5592 5956 6126 6360 6790 7068 7228 7522 7714) (4710 5120 5592 6126 6360 6790 7068 7228 7522 7714) (4246 4710 5592 6126 6360 6790 7068 7228 7522 7714) (4246 4710 5618 6126 6360 6790 7068 7228 7522 7714) (4246 4710 5618 6216 6360 6790 7068 7228 7522 7714) (4246 4616 5618 6216 6360 6790 7068 7228 7522 7714) (4246 4616 5618 6216 6360 6664 7068 7228 7522 7714) (4382 4616 5618 6216 6360 6664 7068 7228 7522 7714) (4382 4616 5618 5810 6216 6664 7068 7228 7522 7714) (4382 4616 5548 5618 5810 6216 6664 7228 7522 7714) (4382 4616 5512 5548 5618 5810 6216 6664 7522 7714) (4382 4616 5206 5512 5548 5618 5810 6216 6664 7714) (4382 4392 4616 5206 5512 5548 5618 5810 6216 6664) (4382 4392 4616 5206 5512 5548 5618 5810 6216 6618) (4382 4392 4616 5206 5512 5548 5618 5810 6618 7172) (4382 4392 4616 5206 5512 5548 5618 6618 7172 7256) (4382 4392 4616 5206 5512 5548 6618 7172 7256 7340) (4382 4392 4616 5206 5512 6618 7172 7256 7340 7418) (4382 4392 4616 5206 6618 7172 7256 7340 7418 7458) (4382 4392 4616 6618 7172 7256 7340 7418 7458 7600) (4382 4392 6618 7172 7256 7340 7418 7458 7600 7840) (4382 6618 7172 7256 7340 7418 7458 7600 7840 7894) (6618 7172 7256 7340 7418 7458 7600 7840 7894 7962) (6618 7172 7256 7346 7418 7458 7600 7840 7894 7962) (6600 7172 7256 7346 7418 7458 7600 7840 7894 7962) (6600 7172 7278 7346 7418 7458 7600 7840 7894 7962) (6600 7172 7278 7346 7418 7496 7600 7840 7894 7962) (6600 7098 7172 7278 7346 7496 7600 7840 7894 7962) (6600 7038 7098 7278 7346 7496 7600 7840 7894 7962) (6016 6600 7038 7098 7278 7346 7496 7840 7894 7962) (5830 6016 6600 7038 7098 7278 7346 7496 7894 7962) (5752 5830 6016 6600 7038 7098 7278 7346 7496 7962) (5432 5752 5830 6016 6600 7038 7098 7278 7346 7496) (5432 5752 5830 6016 6614 7038 7098 7278 7346 7496) (5432 5732 5830 6016 6614 7038 7098 7278 7346 7496) (5432 5732 5830 6054 6614 7038 7098 7278 7346 7496) (5432 5732 5830 6054 6614 7038 7098 7278 7346 7542) (5432 5732 5830 6054 6614 7038 7098 7218 7346 7542) (5432 5732 6054 6200 6614 7038 7098 7218 7346 7542) (5432 5732 6054 6200 6614 6862 7038 7218 7346 7542) (5432 5732 6054 6200 6424 6614 6862 7038 7218 7542) (4754 5432 5732 6054 6200 6424 6614 6862 7218 7542) (4388 4754 5732 6054 6200 6424 6614 6862 7218 7542) (4388 4754 5694 6054 6200 6424 6614 6862 7218 7542) (4388 4754 5694 6054 6200 6362 6614 6862 7218 7542) (4388 4754 5694 6054 6276 6362 6614 6862 7218 7542) (4388 4658 5694 6054 6276 6362 6614 6862 7218 7542) (4192 4658 5694 6054 6276 6362 6614 6862 7218 7542) (4192 4658 5418 5694 6276 6362 6614 6862 7218 7542) (4192 4658 5318 5418 5694 6276 6362 6862 7218 7542) (4192 4658 4948 5318 5418 5694 6276 6362 7218 7542) (4192 4658 4948 5318 5418 5694 6276 6362 7218) (4192 4658 4948 5318 5418 5694 6276 6362) (4192 4658 4948 5318 5418 5694 6276 6362 7434) (4192 4426 4658 4948 5318 5418 5694 6276 6362 7434) (4192 4426 4658 4948 5318 5416 5694 6276 6362 7434) (4192 4426 4658 4948 5318 5416 5718 6276 6362 7434) (4192 4426 4658 4948 5318 5416 5718 6316 6362 7434) (4192 4426 4658 4948 5318 5416 5480 5718 6316 7434) (4192 4426 4708 4948 5318 5416 5480 5718 6316 7434) (4192 4426 4708 4948 5234 5416 5480 5718 6316 7434) (4192 4426 4708 5104 5234 5416 5480 5718 6316 7434) (4014 4426 4708 5104 5234 5416 5480 5718 6316 7434) (4014 4426 4708 5104 5226 5416 5480 5718 6316 7434) (4014 4426 4708 5104 5226 5416 5480 5764 6316 7434) (4014 4426 4708 5054 5226 5416 5480 5764 6316 7434) (4014 4426 4708 5054 5226 5416 5480 5764 6244 7434) (4014 4532 4708 5054 5226 5416 5480 5764 6244 7434) (4014 4532 4598 5054 5226 5416 5480 5764 6244 7434) (4014 4532 4598 5054 5226 5416 5642 5764 6244 7434) (4014 4532 4598 5054 5226 5242 5642 5764 6244 7434) (4532 4598 5054 5226 5242 5642 5764 6126 6244 7434) (4532 4598 5054 5226 5242 5642 5764 6126 6244 6524) (4532 4604 5054 5226 5242 5642 5764 6126 6244 6524) (4532 4604 5054 5226 5242 5642 5764 6126 6236 6524) (4532 4604 5054 5226 5242 5642 5764 6126 6236 6504) (4532 4604 5054 5226 5242 5642 5798 6126 6236 6504) (4604 4744 5054 5226 5242 5642 5798 6126 6236 6504) (4604 4744 5054 5154 5242 5642 5798 6126 6236 6504) (4604 4744 5054 5154 5480 5642 5798 6126 6236 6504) (4604 4744 5154 5480 5642 5798 5982 6126 6236 6504) (4604 4744 5154 5480 5642 5798 5982 6236 6294 6504) (4604 4744 5154 5480 5798 5982 6236 6294 6484 6504) (4604 4744 5230 5480 5798 5982 6236 6294 6484 6504) (4604 4744 5230 5798 5982 6236 6294 6484 6504 6982) (4604 4744 5230 5798 5982 6236 6294 6484 6982 7366) (4604 5230 5798 5982 6236 6294 6484 6982 7366 7430) (4604 5230 5798 5982 6236 6294 6982 7366 7430 7508) (4604 5230 5982 6236 6294 6982 7366 7430 7508 7534) (4604 5230 6236 6294 6982 7366 7430 7508 7534) (4604 5230 6294 6982 7366 7430 7508 7534) (4604 5230 6982 7366 7430 7508 7534) (5230 6982 7366 7430 7508 7534))) :lonset (quote (0 300 600 900 1200 1500 1800 2100 2400 2700 3000 3300 3600 3900 4200 4500 4800 5100 5400 5700 6000 6300 6600 6900 7200 7500 7800 8100 8400 8700 9000 9300 9600 9900 10200 10500 10800 11100 11400 11700 12000 12300 12600 12900 13200 13500 13800 14100 14400 14700 15000 15300 15600 15900 16200 16500 16800 17100 17400 17700 18000 18300 18600 18900 19200 19500 19800 20100 20400 20700 21000 21300 21600 21900 22200 22500 22800 23100 23400 23700 24000 24300 24600 24900 25200 25500 25800 26100 26400 26700 27000 27300 27600 27900 28200 28500 28800 29100 29400 29700 30000 30300 30600 30900 31200 31500 31800 32100 32400 32700 33000 33300 33600 33900 34200 34500 34800 35100 35400 35700 36000 36300 36600 36900 37200 37500 37800 38100 38400 38700 39000 39300 39600 39900 40200 40500 40800 41100 41400 41700 42000 42300 42600 42900 43200 43500 43800 44100 44400 44700 45000 45300 45600 45900 46200 46500 46800 47100 47400 47700 48000 48300 48600 48900 49200 49500 49800 50100 50400 50700 50900)) :ldur (quote ((200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200) (200 200 200 200 200 200))) :lvel (quote ((100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100))) :loffset (quote ((0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 -6) nil 0 (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MUTATION" (quote mutation) (quote ((om-load-inputfun (quote input-funbox) "a sequence of chords" "CHORDS" nil))) (om-make-point 702 373) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 700 57) (om-make-point 36 34) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 641 57) (om-make-point 44 34) 500 "500" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 715 227) (om-make-point 362 125) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4414 4976 6378 5726 5528 6208 6514 6010 5950) (4862 5146 4934 5366 6194 6004 6266 5714 4498) (4724 4240 4106 4834 4960 5472 5134 5708 6348 5526) (4734 6092 5840 6292 5658 5926 6512 5386 4404 6284) (4308 5286 5166 5798 5920 6272 4138 7302 6508 5138) (4820 5972 4622 5614 5762 6130 6398 6312 5766 6428) (5542 4910 4524 6730 6564 6366 5130 6618 7168 5782) (6752 6262 5120 6284 7500 5956 6688 5504 7274 6302) (5592 7228 4710 7068 6126 4246 6360 7714 7522 6790) (4392 4382 4616 5810 5618 5548 5206 6664 5512 6216) (7962 7894 7840 7600 6618 7340 7458 7418 7256 7172) (5752 7038 7098 7278 5432 6600 7346 6016 5830 7496) (4754 5732 6614 4388 6862 6054 6200 7542 7218 6424) (4658 5694 4948 6276 6362 5418 5318 4192) (5416 5234 4014 5480 5104 4708 5718 4426 6316 7434) (5242 5054 6126 4532 6244 4598 5764 5226 6524 5642) (5480 6484 4604 5982 4744 6236 5154 6294 6504 5798) (7366 7430 5230 7534 7508 6982))) :lonset (quote (0 610 1200 1710 2290 2800 3400 3920 4430 4960 5570 6110 6620 7120 7620 8320 8840 9360 9920)) :ldur (quote ((1070 790 700 1060 250 920 570 1010 620) (760 640 100 580 130 140 640 680 820) (240 100 530 910 600 120 180 640 250 1010) (660 730 820 650 560 480 680 530 890 120) (1030 600 1160 630 1090 510 370 470 560 290) (200 540 580 510 120 710 110 510 520 590) (620 280 860 1220 1040 880 830 530 510 290) (530 980 1200 1140 610 1140 110 1000 860 670) (330 240 410 220 70 450 30 250 200 260) (310 870 450 150 90 290 480 100 830 830) (330 330 380 230 340 730 690 300 70 50) (1210 740 650 700 1130 1100 700 1270 920 870) (380 120 390 320 90 500 390 340 350 340) (320 290 170 920 340 140 500 560) (280 1010 500 450 490 1010 190 170 510 120) (1070 1140 1170 580 1080 140 710 110 940 940) (500 290 40 760 720 170 790 530 980 1080) (190 380 80 280 100 110))) :lvel (quote ((64 56 50 50 50 49 48 45 45) (60 59 56 55 48 47 45 44 43) (71 61 60 59 57 54 48 46 44 44) (64 62 61 59 58 56 55 54 48 45) (65 63 59 55 54 52 50 45 45 45) (57 55 55 53 52 51 48 48 47 46) (69 66 61 60 60 59 57 56 55 53) (74 63 63 58 51 51 50 49 48 48) (73 62 60 58 56 51 49 48 47 47) (72 68 62 54 53 53 53 50 49 48) (63 63 62 48 46 45 44 44 43 43) (64 60 54 52 52 50 48 48 47 46) (64 61 51 50 49 49 48 46 46 45) (73 58 56 52 48 45 45 45) (70 62 61 59 59 58 56 54 51 48) (69 67 55 52 51 49 48 48 44 43) (54 53 52 50 49 48 46 45 44 44) (71 59 59 55 48 47))) :loffset (quote ((0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.2 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 -4) nil 0 (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 1060 251) (om-make-point 3501 239) 0 1 (quote :normal) (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "AS->OM" (quote as->om) (quote ((om-load-inputfun (quote input-funbox) "Analyse" "ANALYSE" nil) (om-load-inputfun (quote input-funbox) "vel min" "VMIN" 40) (om-load-inputfun (quote input-funbox) "vel max" "VMAX" 100) (om-load-inputfun (quote input-funbox) "delta" "DELTA" 500) (om-load-inputfun (quote input-funbox) "midic min" "MMIN" 4000) (om-load-inputfun (quote input-funbox) "midic max" "MMAX" 8000) (om-load-inputfun (quote input-funbox) "approx" "APPROX" 8) (om-load-inputfun (quote input-funbox) "poly. density" "NPOLY" 10))) (om-make-point 639 143) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 223 354) (om-make-point 394 236) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4414) (5528) (6378 4976) (6514) (5950) (5726) (6208) (6010) (4934) (6004) (6194) (5366) (5714 5146) (6266) (4862) (4498) (4960 4724 4240) (5472) (5134) (6544 5708) (6348) (5726) (4106) (5714) (4834) (7310) (5144) (6166) (5526) (5938) (5660) (6466 6284) (4734 3928) (5658) (7110 6942 6292) (7264 6512 6092) (5926 5386) (7456) (5840) (4404) (5558) (6174) (4308) (12246 12044 11966) (12222 12148) (12018) (12006) (5138) (6272 5920 5286 4138) (7302) (9466) (6508) (5798) (5166) (9498 9436) (9828 5922) (9374) (6398) (7422) (5762) (6554 4820) (5972) (6312) (5614) (6130 5766) (4622) (6428 5424) (5650) (3890) (5542) (6086) (7148 6190) (5936) (6976 6618 4910) (7360 5782) (6782) (7416 7168 7052 5130) (7360 6620 6366) (4524) (6956) (5818) (6184) (6680 6564) (7248 6730) (7454 7140 5466) (7520 7024) (9866) (7782 7528) (7942 7876 7502 7330 7248 6688) (8008) (8282 8122) (10242) (9372 8388 8198) (9178) (10306) (7888 6752) (8010 7836) (9636 8080) (9586 8712 8190) (7500 7126 7054) (8262 7274 5654 4344) (9682 7808 6262) (7226) (6302) (7396) (7590 7458 6284 5956) (5120) (6480) (5504) (7068 6360 6126) (7522 7378 7082) (7228) (6790) (7814 7714 7480 5592 5400) (7910) (6104 4710) (9510 7588) (4246) (5512) (12616 12596 12514 12478) (12640 12606 12580 12572 12542 12452 12436 12428 12412 12404 12366) (12648 12558 12396 12374 12346) (12566 12356 12330 12324 12316) (12496 12440 12422 12388) (12368) (12360 12342 12300 4754) (12466 12458 12432 12382) (12478) (12416) (12504) (5548) (6664 6368 4392) (7206 5618) (6014 5810) (8932 6838 6176) (5230 4830) (6216 5206 4616) (5972) (4382) (5512) (7028 6226) (7172) (7256 7050) (7840) (9572) (9600) (8970 7600) (9392 9056 9064 7962 7894 6618) (9164 7418) (9260) (9138) (9118) (9214) (8070) (9298 8166) (9378 9080) (9310) (9128 7458) (7340) (9016) (8250) (8930) (10810 7038) (8526) (9256) (8426) (8210) (7098) (7346 7278) (6912) (5752) (7496 6600) (5830) (6654 5432) (6016) (7240 6862) (5732) (4754) (10770 10704) (6200) (6614) (7354 7218 4388) (7542 6424) (9182 8976 8894 7144) (9096) (9814) (3970) (6054 3456) (12432) (12540 12508 12486 12468 12460 12454 12448 12438 12406 12404 12390 12376 12376 12366 12354 12342 12328 12270) (12518 12476 12424 12360 12318 12302 12250) (12336 12260) (12278 12240 12218 12206) (12410) (12348) (12226) (12618 12600 12470 12418) (12544 12484 12440) (12460 12370 12290) (12578 12570 12452 12376 12334 12250) (12496 12440 12420) (12262 5694) (4658) (3772) (5418 4948) (6362) (5318) (4192) (3464) (6276) (5992 5430) (5718 5416) (7772 7434 7278 7178 6982 6658 6452 6316) (4426) (5452) (6880) (7302) (6438 5480) (5104) (7128 4014) (6320) (6850) (4708) (5234) (6226) (5986) (7000 6778) (5226) (4598) (5898) (5054) (6126 4532) (5764) (5242) (6244) (6524) (5642) (4604) (6484 6236) (5480) (6294) (4744) (5154) (5982) (5208) (6504) (5798) (7430 6982 5230) (7508) (8154) (9398 9194 8562 8416 8228) (10380 9280) (9266 7366) (9334) (7534) (9426) (9166 9130) (8726) (9346) (9310))) :lonset (quote (38 50 250 262 275 287 412 488 613 625 637 762 887 900 938 1000 1200 1212 1225 1237 1250 1313 1400 1425 1475 1575 1612 1638 1675 1712 1725 1737 1875 1888 1900 1913 1925 1938 2037 2100 2125 2287 2325 2362 2375 2388 2400 2412 2450 2487 2513 2525 2563 2575 2737 2763 2775 2800 2813 2838 2850 2862 2975 3000 3025 3037 3075 3188 3350 3400 3425 3438 3475 3500 3513 3600 3612 3625 3638 3650 3700 3737 3750 3763 3775 3813 3862 3925 3938 3950 3963 3975 3987 4000 4012 4125 4137 4150 4162 4175 4188 4200 4225 4238 4300 4325 4338 4363 4387 4425 4438 4463 4475 4500 4525 4550 4563 4613 4762 4775 4787 4800 4813 4825 4838 4850 4863 4900 4912 4925 4963 4975 4988 5000 5012 5025 5150 5162 5325 5338 5350 5575 5588 5613 5637 5650 5662 5675 5688 5700 5713 5725 5750 5775 5787 5813 5825 5875 5912 6063 6075 6088 6113 6238 6250 6338 6363 6400 6425 6450 6475 6500 6525 6537 6588 6625 6662 6700 6713 6725 6738 6750 6762 6775 6787 6800 6838 6850 6925 6938 6950 6963 6975 6988 7000 7012 7025 7037 7050 7063 7075 7125 7137 7150 7162 7188 7338 7350 7363 7550 7625 7637 7650 7662 7700 7762 7787 7800 7813 7825 7850 7863 8050 8063 8087 8100 8113 8325 8337 8375 8525 8563 8637 8663 8712 8738 8762 8837 8900 9038 9050 9113 9175 9188 9212 9250 9325 9363 9375 9387 9413 9425 9438 9462 9475 9488 9512 9550 9637 9663 9738)) :ldur (quote ((988) (150) (200 287) (50) (62) (487) (100) (37) (100) (113) (75) (275) (125 87) (63) (100) (38) (600 237 100) (100) (125) (100 563) (150) (75) (125) (38) (350) (38) (63) (50) (63) (50) (50) (38 63) (325 75) (200) (75 38 275) (50 275 325) (50 100) (38) (163) (113) (63) (63) (950) (38 50 50) (38 38) (37) (37) (50) (188 275 275 50) (75) (37) (87) (88) (588) (50 50) (37 150) (37) (113) (38) (37) (38 100) (413) (163) (112) (250 63) (100) (37 63) (63) (50) (625) (263) (100 587) (88) (63 63 75) (37 63) (113) (75 88 88 412) (38 88 438) (387) (50) (37) (88) (100 337) (100 500) (87 275 50) (38 88) (38) (63 63) (112 150 112 137 75 75) (37) (50 75) (37) (37 50 37) (37) (50) (137 125) (113 37) (62 87) (63 50 50) (100 50 87) (50 325 75 75) (37 63 425) (63) (37) (87) (37 37 338 338) (362) (100) (63) (225 37 75) (188 225 37) (175) (175) (87 112 100 188 75) (50) (75 175) (63 37) (87) (88) (62 87 50 62) (37 50 50 112 125 200 175 63 200 175 200) (37 87 175 112 137) (37 188 37 87 87) (37 88 162 162) (37) (112 63 63 50) (125 100 112 137) (75) (63) (37) (287) (75 75 287) (50 37) (75 75) (37 37 37) (62 75) (87 100 75) (88) (150) (75) (37 50) (50) (37 37) (300) (50) (37) (63 50) (50 37 250 112 112 125) (212 63) (188) (125) (37) (87) (125) (50 112) (63 63) (50) (37 75) (50) (37) (137) (100) (37 737) (137) (37) (37) (75) (75) (62 62) (100) (487) (87 325) (87) (50 275) (312) (75 87) (37) (225) (37 37) (188) (150) (37 87 63) (63 63) (50 50 37 50) (50) (37) (62) (37 37) (212) (37 37 63 37 63 200 87 50 212 37 212 200 63 75 212 200 162 63) (37 150 37 188 175 75 50) (75 62) (125 37 88 88) (75) (100) (37) (37 100 50 125) (50 75 88) (50 37 50) (37 63 50 50 100 63) (63 37 63) (37 287) (287) (50) (63 88) (200) (62) (100) (87) (62) (287 275) (150 50) (37 62 37 50 37 37 262 75) (88) (63) (50) (75) (112 87) (112) (88 100) (50) (37) (150) (125) (63) (37) (50 37) (100) (100) (37) (738) (688 100) (75) (387) (300) (100) (63) (38) (175 50) (100) (112) (175) (112) (63) (38) (162) (113) (375 112 75) (63) (50) (50 50 87 62 37) (50 87) (75 37) (63) (50) (100) (50 50) (50) (38) (62))) :lvel (quote ((81) (63) (62 71) (60) (57) (63) (61) (56) (71) (60) (60) (69) (56 74) (56) (75) (53) (72 90 77) (68) (60) (53 58) (55) (54) (76) (51) (74) (50) (54) (53) (55) (55) (53) (52 56) (81 67) (74) (55 53 74) (52 70 78) (71 68) (54) (77) (60) (57) (54) (83) (52 51 52) (51 51) (53) (54) (57) (66 60 79 62) (57) (53) (56) (69) (75) (52 52) (53 68) (54) (61) (50) (66) (55 72) (69) (61) (67) (65 59) (69) (58 55) (56) (56) (87) (59) (59 64) (65) (61 55 83) (54 66) (63) (54 69 63 72) (53 70 74) (77) (64) (54) (63) (60 76) (66 75) (58 60 57) (54 61) (52) (53 56) (59 59 65 55 54 62) (53) (53 58) (52) (53 54 53) (53) (54) (59 93) (85 55) (60 65) (58 55 59) (58 56 56) (55 60 57 58) (53 56 79) (54) (60) (58) (52 55 74 64) (79) (55) (61) (73 62 71) (59 57 55) (78) (59) (57 61 55 92 59) (56) (59 75) (54 56) (65) (54) (57 57 56 58) (52 55 57 56 54 59 57 56 58 58 58) (52 53 60 59 56) (55 56 53 60 60) (53 57 59 61) (56) (55 54 54 55) (55 58 55 62) (56) (57) (52) (66) (63 59 91) (54 67) (58 68) (53 53 58) (61 59) (60 67 79) (57) (86) (61) (53 55) (54) (54 52) (78) (54) (55) (54 61) (53 58 69 80 80 58) (71 55) (64) (93) (78) (64) (71) (63 98) (59 54) (55) (58 55) (57) (54) (89) (109) (53 76) (127) (56) (70) (79) (69) (61 65) (56) (81) (57 63) (59) (56 65) (61) (54 62) (77) (81) (53 52) (60) (65) (53 58 63) (58 56) (56 55 52 55) (53) (52) (61) (61 53) (62) (55 56 59 55 56 62 59 56 60 66 60 61 67 62 65 63 58 58) (54 59 61 60 57 57 53) (62 54) (57 56 54 54) (55) (58) (54) (53 56 56 60) (56 57 61) (56 54 55) (53 54 54 54 57 57) (54 62 54) (54 73) (92) (54) (56 70) (60) (56) (56) (61) (65) (58 73) (71 88) (53 60 57 56 54 53 57 53) (68) (54) (58) (56) (60 74) (74) (57 77) (64) (56) (73) (79) (55) (54) (54 51) (60) (62) (53) (85) (69 65) (60) (87) (65) (55) (54) (65) (67 60) (67) (57) (61) (57) (63) (53) (55) (55) (75 59 75) (60) (56) (54 55 67 56 52) (54 69) (60 90) (55) (70) (56) (53 54) (52) (53) (56))) :loffset (quote ((0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0 0 0) (0 0 0) (0 0) (0) (0) (0) (0) (0) (0) (0 0 0) (0 0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0 0 0) (0 0) (0) (0 0 0 0) (0 0 0) (0) (0) (0) (0) (0 0) (0 0) (0 0 0) (0 0) (0) (0 0) (0 0 0 0 0 0) (0) (0 0) (0) (0 0 0) (0) (0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0 0 0) (0 0 0) (0) (0) (0 0 0 0 0) (0) (0 0) (0 0) (0) (0) (0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0) (0 0 0 0) (0 0 0 0) (0) (0) (0) (0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0 0 0 0 0 0) (0 0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0 0) (0 0) (0 0 0 0) (0) (0) (0) (0 0) (0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0) (0 0 0 0) (0) (0) (0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0 0 0) (0 0 0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0 0) (0 0 0 0 0 0 0 0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0 0 0 0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0) (0) (0))) :lchan (quote ((1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1 1 1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1 1) (1) (1 1 1) (1 1 1) (1 1) (1) (1) (1) (1) (1) (1) (1 1 1) (1 1) (1) (1) (1) (1 1 1 1) (1) (1) (1) (1) (1) (1 1) (1 1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1) (1 1) (1) (1 1 1) (1 1) (1) (1 1 1 1) (1 1 1) (1) (1) (1) (1) (1 1) (1 1) (1 1 1) (1 1) (1) (1 1) (1 1 1 1 1 1) (1) (1 1) (1) (1 1 1) (1) (1) (1 1) (1 1) (1 1) (1 1 1) (1 1 1) (1 1 1 1) (1 1 1) (1) (1) (1) (1 1 1 1) (1) (1) (1) (1 1 1) (1 1 1) (1) (1) (1 1 1 1 1) (1) (1 1) (1 1) (1) (1) (1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1) (1) (1 1 1 1) (1 1 1 1) (1) (1) (1) (1) (1 1 1) (1 1) (1 1) (1 1 1) (1 1) (1 1 1) (1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1 1) (1 1 1 1 1 1) (1 1) (1) (1) (1) (1) (1) (1 1) (1 1) (1) (1 1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1 1) (1) (1 1) (1) (1 1) (1) (1) (1 1) (1) (1) (1 1 1) (1 1) (1 1 1 1) (1) (1) (1) (1 1) (1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1) (1 1 1 1) (1) (1) (1) (1 1 1 1) (1 1 1) (1 1 1) (1 1 1 1 1 1) (1 1 1) (1 1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1 1) (1 1 1 1 1 1 1 1) (1) (1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1 1) (1) (1) (1 1 1 1 1) (1 1) (1 1) (1) (1) (1) (1 1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0 0 0) (0 0 0) (0 0) (0) (0) (0) (0) (0) (0) (0 0 0) (0 0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0 0 0) (0 0) (0) (0 0 0 0) (0 0 0) (0) (0) (0) (0) (0 0) (0 0) (0 0 0) (0 0) (0) (0 0) (0 0 0 0 0 0) (0) (0 0) (0) (0 0 0) (0) (0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0 0 0) (0 0 0) (0) (0) (0 0 0 0 0) (0) (0 0) (0 0) (0) (0) (0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0) (0 0 0 0) (0 0 0 0) (0) (0) (0) (0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0 0 0 0 0 0) (0 0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0 0) (0 0) (0 0 0 0) (0) (0) (0) (0 0) (0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0) (0 0 0 0) (0) (0) (0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0 0 0) (0 0 0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0 0) (0 0 0 0 0 0 0 0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0 0 0 0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.2 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 24) nil 0 (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 923 309) (om-make-point 3112 278) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SDIF->CHORD-SEQ" (quote sdif->chord-seq) (quote ((om-load-inputfun (quote input-funbox) "an SDIF file" "SELF" nil))) (om-make-point 338 268) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GETSDIFCHORDS" (quote getsdifchords) (quote ((om-load-inputfun (quote input-funbox) "an SDIF file" "SELF" nil))) (om-make-point 63 306) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "mmm.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 127 76) (om-make-point 203 63) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:absolute "Volumes" "GoogleDrive-102930844268164584476" "My Drive" "CLASSES" "MUSC" "MUSC125" "Assignments" "Assignments" "4 - Final Project - Musical Futures")) :device nil :host nil :name "mmm" :type "sdif")))) (when newobj) newobj) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 145 90) (om-make-point 1369 575))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 3 2 0 nil 0) (0 0 2 1 nil 0) (1 0 2 2 nil 0) (6 0 3 1 nil 0) (5 0 3 2 nil 0) (4 0 3 3 nil 0) (2 0 3 4 nil 0) (7 2 4 0 nil 0) (7 1 5 0 nil 0) (7 0 6 0 nil 0) (8 0 7 0 nil 0) (21 0 8 0 nil 0) (11 0 9 0 nil 0) (13 0 11 0 nil 0) (10 0 11 1 nil 0) (14 0 13 1 nil 0) (12 0 13 2 nil 0) (17 0 14 0 nil 0) (18 0 17 0 nil 0) (22 0 18 0 nil 0) (16 0 18 3 nil 0) (15 0 18 7 nil 0) (20 0 19 0 nil 0) (22 0 20 0 nil 0) (22 0 21 0 nil 0))) nil 6.2))
