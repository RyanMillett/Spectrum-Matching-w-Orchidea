; OM File Header - Saved 2021/11/29 21:42:59
; (6.070001 :patc (om-make-point 319 202) (om-make-point 50 50) (om-make-point 500 400) "" 183 0 nil nil)
; End File Header
; External resources 
; (list (list (quote :sound) "../../../../../FILES/sound/guitar.aif") (list (quote :sdif) "../../../in-files/cello-org-fft.sdif" "../../../out-files/myspecificfile.sdif"))
(in-package :om)(load-lib-for (quote ("OM-SuperVP")))(setf *om-current-persistent* (om-load-patch1 "f0" (quote ((om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 258 305) (om-make-point 28 34) 0 "0" nil) (om-load-boxcomment "comment" (om-make-point 205 30) (quote "... or drag from the Finder") "" (om-make-point 960 206) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 364 40) (quote "You can also import an SDIF file directly in OM:") "" (om-make-point 797 52) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote genfun) "INFILE" (quote infile) (quote ((om-load-inputfun (quote input-funbox) "file name" "NAME" ""))) (om-make-point 1007 131) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 971 101) (om-make-point 120 30) "cello-org-f0.sdif" "\"cello-org-f0.sdif\"" nil) (om-load-boxcomment "comment" (om-make-point 205 30) (quote "... or connect a pathname") "" (om-make-point 1050 140) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "cello-org-fft.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 792 130) (om-make-point 115 91) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "cello-org-fft" :type "sdif")))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 400 500) (om-make-point 10 40))) nil nil nil t) (om-load-boxcomment "comment" (om-make-point 205 30) (quote "Evaluate the (unlocked) box") "" (om-make-point 755 97) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 117 59) (quote "basic conversions to musical objects...") "" (om-make-point 536 644) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 156 62) (quote "values (n dimensions, depending on the requested \"fields\")") nil (om-make-point 13 398) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 49 30) (quote "times") nil (om-make-point 320 397) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 369 30) (quote "select streamID, frame and matrix types, field number(s) ..") "" (om-make-point 340 299) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 111 42) (quote "easier for 1D data like f0=>") "" (om-make-point 549 404) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 84 31) (quote "<=general") "" (om-make-point 436 351) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 233 30) (quote "Extracting data from SDIF to OM") "" (om-make-point 368 246) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 181 41) (quote "fundamental frequency estimation") "" (om-make-point 10 7) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 231 62) (quote "If you don't specify a full pathname for \"out\", the file will be created in your \"outfile\" folder.") "" (om-make-point 463 150) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 115 34) (quote ":fund-minfreq") "" (om-make-point 221 40) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 45 34) (quote ":out") "" (om-make-point 261 149) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 349 99) (om-make-point 134 34) "myspecificfile.sdif" "\"myspecificfile.sdif\"" nil) (om-load-boxcall (quote genfun) "OUTFILE" (quote outfile) (quote ((om-load-inputfun (quote input-funbox) "file name" "NAME" "myspecificfile.sdif"))) (om-make-point 404 172) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 222 73) (om-make-point 56 34) 100.0 "100.0" nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 676 774) (om-make-point 409 125) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5922) (6214) (5564) (6412) (6708) (6706) (5518) (5672) (5910) (6038) (4842) (4798) (4752) (5844) (5942) (5516) (5508) (5444) (5378) (5308) (5236) (5186) (5142) (5096) (5050) (5002) (4954) (4904) (4852) (4834) (4962) (5016) (5672) (5022) (6204) (5330) (6188) (6700) (6140) (5170) (7208) (7002) (7004) (7214) (7178) (7002) (7208) (7010) (6722) (6512) (5018) (5740) (4736) (5962) (6132) (6408) (5920) (5502) (4728))) :lonset (quote (46 146 246 346 446 546 646 746 846 946 1046 1146 1246 1346 1446 1546 1646 1746 1846 1946 2046 2146 2246 2346 2446 2546 2646 2746 2846 2946 3046 3146 3246 3346 3446 3546 3646 3746 3846 3946 4046 4146 4246 4346 4446 4546 4646 4746 4846 4946 5046 5146 5246 5346 5446 5546 5646 5746 5846 6846)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil t) (om-load-boxcall (quote genfun) "SEC->MS" (quote sec->ms) (quote ((om-load-inputfun (quote input-funbox) "seconds" "N" 0))) (om-make-point 761 705) nil nil nil nil 1) (om-load-boxcall (quote genfun) "F->MC" (quote f->mc) (quote ((om-load-inputfun (quote input-funbox) "frequency (Hz)" "FREQ" 440))) (om-make-point 835 694) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 816 595) (om-make-point 40 34) 0.1 "0.1" nil) (om-load-boxcall (quote genfun) "OM-SAMPLE" (quote om-sample) (quote ((om-load-inputfun (quote input-funbox) "object to resample" "SELF" nil) (om-load-inputfun (quote input-funbox) "number of samples (int) or sample rate (float)" "SAMPLE-RATE" 1))) (om-make-point 757 629) nil nil nil nil 3) (om-load-boxcomment "comment" (om-make-point 211 63) (quote "Select and set the different analysis parameters using the keyword inputs ('k'/'K')") "" (om-make-point 333 22) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 733 358) (om-make-point 64 34) "1FQ0" "\"1FQ0\"" nil) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 639 485) (om-make-point 418 108) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.046 0.052 0.058 0.064 0.07 0.075 0.081 0.087 0.093 0.099 0.104 0.11 0.116 0.122 0.128 0.134 0.139 0.145 0.151 0.157 0.163 0.168 0.174 0.18 0.186 0.192 0.197 0.203 0.209 0.215 0.221 0.226 0.232 0.238 0.244 0.25 0.255 0.261 0.267 0.273 0.279 0.284 0.29 0.296 0.302 0.308 0.313 0.319 0.325 0.331 0.337 0.342 0.348 0.354 0.36 0.366 0.372 0.377 0.383 0.389 0.395 0.401 0.406 0.412 0.418 0.424 0.43 0.435 0.441 0.447 0.453 0.459 0.464 0.47 0.476 0.482 0.488 0.493 0.499 0.505 0.511 0.517 0.522 0.528 0.534 0.54 0.546 0.551 0.557 0.563 0.569 0.575 0.58 0.586 0.592 0.598 0.604 0.61 0.615 0.621 0.627 0.633 0.639 0.644 0.65 0.656 0.662 0.668 0.673 0.679 0.685 0.691 0.697 0.702 0.708 0.714 0.72 0.726 0.731 0.737 0.743 0.749 0.755 0.76 0.766 0.772 0.778 0.784 0.789 0.795 0.801 0.807 0.813 0.818 0.824 0.83 0.836 0.842 0.848 0.853 0.859 0.865 0.871 0.877 0.882 0.888 0.894 0.9 0.906 0.911 0.917 0.923 0.929 0.935 0.94 0.946 0.952 0.958 0.964 0.969 0.975 0.981 0.987 0.993 0.998 1.004 1.01 1.016 1.022 1.027 1.033 1.039 1.045 1.051 1.056 1.062 1.068 1.074 1.08 1.086 1.091 1.097 1.103 1.109 1.115 1.12 1.126 1.132 1.138 1.144 1.149 1.155 1.161 1.167 1.173 1.178 1.184 1.19 1.196 1.202 1.207 1.213 1.219 1.225 1.231 1.236 1.242 1.248 1.254 1.26 1.265 1.271 1.277 1.283 1.289 1.295 1.3 1.306 1.312 1.318 1.324 1.329 1.335 1.341 1.347 1.353 1.358 1.364 1.37 1.376 1.382 1.387 1.393 1.399 1.405 1.411 1.416 1.422 1.428 1.434 1.44 1.445 1.451 1.457 1.463 1.469 1.474 1.48 1.486 1.492 1.498 1.503 1.509 1.515 1.521 1.527 1.533 1.538 1.544 1.55 1.556 1.562 1.567 1.573 1.579 1.585 1.591 1.596 1.602 1.608 1.614 1.62 1.625 1.631 1.637 1.643 1.649 1.654 1.66 1.666 1.672 1.678 1.683 1.689 1.695 1.701 1.707 1.712 1.718 1.724 1.73 1.736 1.741 1.747 1.753 1.759 1.765 1.771 1.776 1.782 1.788 1.794 1.8 1.805 1.811 1.817 1.823 1.829 1.834 1.84 1.846 1.852 1.858 1.863 1.869 1.875 1.881 1.887 1.892 1.898 1.904 1.91 1.916 1.921 1.927 1.933 1.939 1.945 1.95 1.956 1.962 1.968 1.974 1.979 1.985 1.991 1.997 2.003 2.009 2.014 2.02 2.026 2.032 2.038 2.043 2.049 2.055 2.061 2.067 2.072 2.078 2.084 2.09 2.096 2.101 2.107 2.113 2.119 2.125 2.13 2.136 2.142 2.148 2.154 2.159 2.165 2.171 2.177 2.183 2.188 2.194 2.2 2.206 2.212 2.217 2.223 2.229 2.235 2.241 2.247 2.252 2.258 2.264 2.27 2.276 2.281 2.287 2.293 2.299 2.305 2.31 2.316 2.322 2.328 2.334 2.339 2.345 2.351 2.357 2.363 2.368 2.374 2.38 2.386 2.392 2.397 2.403 2.409 2.415 2.421 2.426 2.432 2.438 2.444 2.45 2.455 2.461 2.467 2.473 2.479 2.485 2.49 2.496 2.502 2.508 2.514 2.519 2.525 2.531 2.537 2.543 2.548 2.554 2.56 2.566 2.572 2.577 2.583 2.589 2.595 2.601 2.606 2.612 2.618 2.624 2.63 2.635 2.641 2.647 2.653 2.659 2.664 2.67 2.676 2.682 2.688 2.694 2.699 2.705 2.711 2.717 2.723 2.728 2.734 2.74 2.746 2.752 2.757 2.763 2.769 2.775 2.781 2.786 2.792 2.798 2.804 2.81 2.815 2.821 2.827 2.833 2.839 2.844 2.85 2.856 2.862 2.868 2.873 2.879 2.885 2.891 2.897 2.902 2.908 2.914 2.92 2.926 2.932 2.937 2.943 2.949 2.955 2.961 2.966 2.972 2.978 2.984 2.99 2.995 3.001 3.007 3.013 3.019 3.024 3.03 3.036 3.042 3.048 3.053 3.059 3.065 3.071 3.077 3.082 3.088 3.094 3.1 3.106 3.111 3.117 3.123 3.129 3.135 3.14 3.146 3.152 3.158 3.164 3.17 3.175 3.181 3.187 3.193 3.199 3.204 3.21 3.216 3.222 3.228 3.233 3.239 3.245 3.251 3.257 3.262 3.268 3.274 3.28 3.286 3.291 3.297 3.303 3.309 3.315 3.32 3.326 3.332 3.338 3.344 3.349 3.355 3.361 3.367 3.373 3.378 3.384 3.39 3.396 3.402 3.408 3.413 3.419 3.425 3.431 3.437 3.442 3.448 3.454 3.46 3.466 3.471 3.477 3.483 3.489 3.495 3.5 3.506 3.512 3.518 3.524 3.529 3.535 3.541 3.547 3.553 3.558 3.564 3.57 3.576 3.582 3.587 3.593 3.599 3.605 3.611 3.616 3.622 3.628 3.634 3.64 3.646 3.651 3.657 3.663 3.669 3.675 3.68 3.686 3.692 3.698 3.704 3.709 3.715 3.721 3.727 3.733 3.738 3.744 3.75 3.756 3.762 3.767 3.773 3.779 3.785 3.791 3.796 3.802 3.808 3.814 3.82 3.825 3.831 3.837 3.843 3.849 3.855 3.86 3.866 3.872 3.878 3.884 3.889 3.895 3.901 3.907 3.913 3.918 3.924 3.93 3.936 3.942 3.947 3.953 3.959 3.965 3.971 3.976 3.982 3.988 3.994 4.0 4.005 4.011 4.017 4.023 4.029 4.034 4.04 4.046 4.052 4.058 4.063 4.069 4.075 4.081 4.087 4.093 4.098 4.104 4.11 4.116 4.122 4.127 4.133 4.139 4.145 4.151 4.156 4.162 4.168 4.174 4.18 4.185 4.191 4.197 4.203 4.209 4.214 4.22 4.226 4.232 4.238 4.243 4.249 4.255 4.261 4.267 4.272 4.278 4.284 4.29 4.296 4.301 4.307 4.313 4.319 4.325 4.331 4.336 4.342 4.348 4.354 4.36 4.365 4.371 4.377 4.383 4.389 4.394 4.4 4.406 4.412 4.418 4.423 4.429 4.435 4.441 4.447 4.452 4.458 4.464 4.47 4.476 4.481 4.487 4.493 4.499 4.505 4.51 4.516 4.522 4.528 4.534 4.539 4.545 4.551 4.557 4.563 4.569 4.574 4.58 4.586 4.592 4.598 4.603 4.609 4.615 4.621 4.627 4.632 4.638 4.644 4.65 4.656 4.661 4.667 4.673 4.679 4.685 4.69 4.696 4.702 4.708 4.714 4.719 4.725 4.731 4.737 4.743 4.748 4.754 4.76 4.766 4.772 4.777 4.783 4.789 4.795 4.801 4.807 4.812 4.818 4.824 4.83 4.836 4.841 4.847 4.853 4.859 4.865 4.87 4.876 4.882 4.888 4.894 4.899 4.905 4.911 4.917 4.923 4.928 4.934 4.94 4.946 4.952 4.957 4.963 4.969 4.975 4.981 4.986 4.992 4.998 5.004 5.01 5.015 5.021 5.027 5.033 5.039 5.045 5.05 5.056 5.062 5.068 5.074 5.079 5.085 5.091 5.097 5.103 5.108 5.114 5.12 5.126 5.132 5.137 5.143 5.149 5.155 5.161 5.166 5.172 5.178 5.184 5.19 5.195 5.201 5.207 5.213 5.219 5.224 5.23 5.236 5.242 5.248 5.254 5.259 5.265 5.271 5.277 5.283 5.288 5.294 5.3 5.306 5.312 5.317 5.323 5.329 5.335 5.341 5.346 5.352 5.358 5.364 5.37 5.375 5.381 5.387 5.393 5.399 5.404 5.41 5.416 5.422 5.428 5.433 5.439 5.445 5.451 5.457 5.462 5.468 5.474 5.48 5.486 5.492 5.497 5.503 5.509 5.515 5.521 5.526 5.532 5.538 5.544 5.55 5.555 5.561 5.567 5.573 5.579 5.584 5.59 5.596 5.602 5.608 5.613 5.619 5.625 5.631 5.637 5.642 5.648 5.654 5.66 5.666 5.671 5.677 5.683 5.689 5.695 5.7 5.706 5.712 5.718 5.724 5.73 5.735 5.741 5.747 5.753 5.759 5.764 5.77 5.776 5.782 5.788 5.793 5.799 5.805 5.811 5.817 5.822 5.828 5.834 5.84 5.846 5.851 5.857 5.863 5.869 5.875 5.88 5.886 5.892 5.898 5.904 5.909 5.915 5.921 5.927 5.933 5.938 5.944)) (quote (250.17 126.044 125.908 126.044 148.503 148.503 148.503 296.568 296.568 296.555 296.525 296.308 296.116 296.116 296.133 296.269 296.269 296.226 296.201 296.193 296.14 296.185 296.185 296.185 296.177 296.164 295.988 295.988 295.953 295.953 295.92 147.902 147.894 147.894 137.094 110.461 110.461 110.744 110.777 110.777 110.777 110.742 332.041 332.033 332.033 332.033 332.027 332.007 331.998 331.998 332.033 332.038 332.043 332.038 331.883 331.883 331.857 331.832 331.751 331.585 331.294 110.374 110.234 110.234 164.842 164.861 197.006 197.038 393.777 393.777 393.668 393.557 393.456 393.358 393.19 393.177 393.19 393.171 393.24 393.24 393.28 393.384 393.418 393.418 393.435 393.435 393.451 393.507 393.608 393.751 393.799 393.799 131.323 131.323 131.32 131.692 152.818 154.163 197.465 197.609 197.865 197.939 198.085 198.085 198.083 198.044 198.024 197.988 197.968 197.968 197.813 197.813 197.786 197.786 197.748 197.716 197.543 196.83 132.931 132.713 132.931 164.265 164.265 147.295 147.245 147.295 147.245 120.04 113.001 120.04 239.118 239.121 239.154 239.243 239.243 119.453 119.441 119.441 119.647 119.741 120.113 120.365 120.658 125.48 125.48 125.622 133.092 265.429 266.045 266.449 266.792 266.913 267.142 267.163 267.227 267.227 267.306 267.38 267.397 267.444 267.46 267.486 267.521 267.547 267.581 267.588 267.592 267.592 267.539 267.539 267.505 267.417 134.079 134.079 134.079 112.424 112.214 111.904 111.904 131.729 131.729 131.38 131.268 131.38 131.856 131.856 131.594 130.721 130.659 130.573 130.659 131.814 132.919 132.729 132.919 197.694 197.694 197.428 197.226 196.974 196.065 132.458 131.261 131.123 127.319 127.319 126.358 126.062 126.062 126.062 127.988 126.111 126.111 126.111 239.21 239.227 239.227 239.227 239.216 239.216 239.189 239.019 238.947 238.947 239.031 239.189 239.258 239.267 239.404 239.704 239.704 239.943 252.968 252.968 252.967 252.967 252.992 252.992 252.978 252.975 252.973 252.975 252.988 252.988 253.096 252.93 133.503 128.537 128.537 128.537 156.489 197.76 197.962 197.962 198.048 198.048 198.04 198.04 197.962 197.962 197.872 197.872 197.879 197.903 197.903 197.881 197.819 197.786 197.779 197.765 197.748 197.727 197.701 197.666 197.615 197.547 197.47 197.463 197.426 197.283 197.092 197.02 131.572 123.411 107.503 107.503 196.297 196.297 195.677 194.963 153.552 149.34 149.34 152.225 199.898 200.471 243.053 243.053 242.659 197.467 242.659 245.814 245.814 245.796 245.796 245.796 245.921 197.282 197.26 197.229 197.206 197.206 197.063 197.134 197.134 197.134 169.692 169.692 216.477 216.477 216.477 220.579 220.579 221.017 202.676 203.595 202.676 176.028 171.491 176.028 199.924 199.924 166.711 166.711 176.679 176.747 176.679 176.629 175.503 123.126 123.126 167.052 167.052 166.608 166.608 250.171 250.171 250.171 251.39 252.47 252.47 252.866 253.281 253.281 165.324 165.324 165.328 165.361 165.34 165.34 165.26 165.242 165.233 165.233 166.483 166.487 166.483 166.455 166.452 166.416 166.416 166.473 166.504 166.541 166.541 166.182 166.11 166.041 165.838 165.749 165.69 165.69 165.921 165.921 165.145 162.404 161.174 109.347 109.347 158.904 158.904 121.206 121.206 243.152 243.152 240.708 238.205 238.205 238.583 238.757 238.757 238.824 239.581 239.835 239.883 240.046 240.343 240.343 240.535 241.567 243.002 244.296 243.002 150.586 150.586 147.482 126.301 126.187 126.301 126.363 126.548 126.563 126.691 126.691 138.949 141.413 141.578 141.413 126.793 126.793 126.179 126.799 126.179 139.255 139.255 157.675 157.675 157.799 157.597 104.742 104.742 104.742 104.679 104.432 104.432 104.436 104.715 104.718 104.718 104.725 104.736 313.29 313.331 313.331 104.394 104.394 104.387 104.384 104.384 104.4 104.4 104.4 104.398 104.398 104.398 104.771 104.771 104.771 104.386 104.386 104.389 104.807 104.807 104.878 157.588 157.588 157.521 157.439 157.439 157.18 156.923 156.148 156.043 155.704 154.997 154.525 154.328 135.384 127.959 127.959 163.961 163.961 164.104 170.427 170.427 163.901 132.836 132.107 132.107 132.107 132.063 131.984 131.776 125.378 118.739 118.739 118.925 119.32 119.323 119.385 119.386 119.386 119.096 119.064 119.064 119.35 119.35 119.344 119.344 119.349 148.463 148.283 148.298 148.298 295.453 295.472 295.639 295.639 148.427 148.427 295.795 295.795 295.748 295.748 148.34 295.82 148.276 148.397 148.397 148.405 296.092 296.124 296.092 296.063 148.45 148.45 295.991 295.991 295.981 295.981 296.101 296.284 296.284 148.572 148.572 296.102 296.102 148.763 148.763 296.102 296.102 296.086 296.046 296.019 296.019 296.091 296.099 296.099 295.92 295.92 295.888 148.753 148.753 296.013 296.014 296.013 296.014 295.997 295.997 295.815 295.815 295.95 295.95 295.921 295.895 295.894 295.894 148.762 148.762 295.944 295.952 295.952 295.949 295.941 295.627 295.627 295.806 295.814 295.814 295.794 295.779 295.779 295.774 148.883 148.577 148.577 148.577 120.192 119.896 119.6 119.6 120.134 120.134 105.408 105.408 104.557 104.605 104.605 104.759 104.851 104.851 105.03 105.03 110.595 110.613 110.716 116.452 116.477 116.564 130.141 130.141 123.075 123.075 130.838 130.932 131.128 130.932 130.753 130.753 392.162 392.162 392.019 391.775 391.338 390.933 195.488 195.427 123.802 123.57 123.585 123.577 123.585 123.577 109.141 109.141 109.184 109.416 109.447 109.477 109.891 111.296 198.301 198.301 198.124 164.535 147.184 104.94 104.94 110.782 110.782 109.63 109.63 109.96 109.96 109.841 104.862 104.862 105.01 131.746 131.746 131.746 529.059 529.059 528.249 526.956 525.948 525.921 525.898 525.892 525.85 525.798 525.736 525.678 525.603 525.561 525.561 525.475 525.339 525.175 524.949 524.949 527.137 527.137 116.51 116.51 116.59 116.608 116.757 155.474 466.545 466.545 466.545 466.517 466.498 466.373 466.373 466.379 466.444 466.652 466.728 466.804 466.899 466.97 467.022 467.067 467.117 467.176 467.245 467.245 155.738 117.259 117.259 117.523 117.586 131.241 131.499 175.405 175.405 105.29 105.29 105.299 105.299 105.278 105.278 546.456 549.682 550.733 555.157 555.317 555.317 555.39 555.501 555.501 555.448 555.398 555.342 555.279 555.194 555.02 542.815 542.067 133.482 116.654 116.654 116.633 116.586 116.633 116.586 131.148 466.235 466.313 466.421 466.449 466.487 466.542 466.588 466.613 466.613 466.51 466.51 466.51 155.851 155.851 155.851 129.924 129.924 129.199 130.278 131.739 131.762 131.762 526.313 526.313 526.184 526.059 525.987 525.84 525.695 525.681 525.695 526.418 526.418 525.421 525.375 525.352 525.352 525.378 525.434 525.434 117.153 117.153 117.162 117.228 468.412 468.478 468.853 469.001 469.001 469.099 469.971 470.331 470.331 117.614 117.614 117.681 117.968 117.968 117.968 131.524 131.828 131.828 131.828 394.583 394.598 394.598 394.681 394.686 394.686 394.29 394.202 394.202 393.623 197.515 131.39 131.308 131.308 122.22 117.031 117.031 351.542 351.715 351.769 351.86 351.951 351.951 351.967 352.01 352.01 117.555 117.555 117.573 117.732 117.74 123.869 146.201 147.693 148.117 148.994 149.68 149.694 299.111 299.111 299.061 299.048 298.879 298.879 298.851 298.649 298.341 298.282 297.974 297.974 297.974 149.537 133.673 133.274 133.526 133.331 133.374 133.331 116.583 116.583 132.848 132.848 132.788 126.465 126.342 126.465 126.296 126.441 126.441 126.441 133.268 134.275 134.275 126.033 125.93 125.867 125.867 252.09 252.09 252.03 251.963 251.514 251.411 251.12 250.939 250.501 250.501 266.004 266.004 133.034 133.027 133.027 133.533 133.549 280.805 281.469 281.75 282.235 282.373 282.419 282.498 282.498 282.429 282.352 282.274 282.051 281.977 281.778 281.719 281.719 281.576 281.413 281.33 140.234 110.578 110.429 110.452 110.452 110.483 331.191 331.191 331.191 330.938 330.938 331.197 331.242 331.242 330.817 329.86 329.559 329.234 328.81 328.513 109.745 109.695 109.695 109.695 110.131 109.618 107.911 107.911 110.581 140.68 141.044 141.044 140.48 140.33 140.33 281.459 281.582 281.793 281.793 281.663 280.902 279.551 279.03 133.449 133.093 132.809 132.709 132.6 132.494 132.206 130.848 126.468 126.105 125.95 125.87 125.829 125.705 125.829 125.501 125.501 125.474 125.461 119.483 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 1169 491) (om-make-point 45 40) nil)) t nil nil t) (om-load-boxcall (quote genfun) "SDIF->BPF" (quote sdif->bpf) (quote ((om-load-inputfun (quote input-funbox) "SDIF file" "SELF" nil) (om-load-inputkeyword (quote input-keyword) "frame type (string)" "frametype" (quote :frametype) "1FQ0" nil) (om-load-inputkeyword (quote input-keyword) "matrix type (string)" "matrixtype" (quote :matrixtype) "1FQ0" nil))) (om-make-point 672 406) (om-make-point 153 61) nil nil nil 1) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 423 511) (om-make-point 28 34) 3 "3" nil) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 99 547) (om-make-point 418 108) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.046 0.052 0.058 0.064 0.07 0.075 0.081 0.087 0.093 0.099 0.104 0.11 0.116 0.122 0.128 0.134 0.139 0.145 0.151 0.157 0.163 0.168 0.174 0.18 0.186 0.192 0.197 0.203 0.209 0.215 0.221 0.226 0.232 0.238 0.244 0.25 0.255 0.261 0.267 0.273 0.279 0.284 0.29 0.296 0.302 0.308 0.313 0.319 0.325 0.331 0.337 0.342 0.348 0.354 0.36 0.366 0.372 0.377 0.383 0.389 0.395 0.401 0.406 0.412 0.418 0.424 0.43 0.435 0.441 0.447 0.453 0.459 0.464 0.47 0.476 0.482 0.488 0.493 0.499 0.505 0.511 0.517 0.522 0.528 0.534 0.54 0.546 0.551 0.557 0.563 0.569 0.575 0.58 0.586 0.592 0.598 0.604 0.61 0.615 0.621 0.627 0.633 0.639 0.644 0.65 0.656 0.662 0.668 0.673 0.679 0.685 0.691 0.697 0.702 0.708 0.714 0.72 0.726 0.731 0.737 0.743 0.749 0.755 0.76 0.766 0.772 0.778 0.784 0.789 0.795 0.801 0.807 0.813 0.818 0.824 0.83 0.836 0.842 0.848 0.853 0.859 0.865 0.871 0.877 0.882 0.888 0.894 0.9 0.906 0.911 0.917 0.923 0.929 0.935 0.94 0.946 0.952 0.958 0.964 0.969 0.975 0.981 0.987 0.993 0.998 1.004 1.01 1.016 1.022 1.027 1.033 1.039 1.045 1.051 1.056 1.062 1.068 1.074 1.08 1.086 1.091 1.097 1.103 1.109 1.115 1.12 1.126 1.132 1.138 1.144 1.149 1.155 1.161 1.167 1.173 1.178 1.184 1.19 1.196 1.202 1.207 1.213 1.219 1.225 1.231 1.236 1.242 1.248 1.254 1.26 1.265 1.271 1.277 1.283 1.289 1.295 1.3 1.306 1.312 1.318 1.324 1.329 1.335 1.341 1.347 1.353 1.358 1.364 1.37 1.376 1.382 1.387 1.393 1.399 1.405 1.411 1.416 1.422 1.428 1.434 1.44 1.445 1.451 1.457 1.463 1.469 1.474 1.48 1.486 1.492 1.498 1.503 1.509 1.515 1.521 1.527 1.533 1.538 1.544 1.55 1.556 1.562 1.567 1.573 1.579 1.585 1.591 1.596 1.602 1.608 1.614 1.62 1.625 1.631 1.637 1.643 1.649 1.654 1.66 1.666 1.672 1.678 1.683 1.689 1.695 1.701 1.707 1.712 1.718 1.724 1.73 1.736 1.741 1.747 1.753 1.759 1.765 1.771 1.776 1.782 1.788 1.794 1.8 1.805 1.811 1.817 1.823 1.829 1.834 1.84 1.846 1.852 1.858 1.863 1.869 1.875 1.881 1.887 1.892 1.898 1.904 1.91 1.916 1.921 1.927 1.933 1.939 1.945 1.95 1.956 1.962 1.968 1.974 1.979 1.985 1.991 1.997 2.003 2.009 2.014 2.02 2.026 2.032 2.038 2.043 2.049 2.055 2.061 2.067 2.072 2.078 2.084 2.09 2.096 2.101 2.107 2.113 2.119 2.125 2.13 2.136 2.142 2.148 2.154 2.159 2.165 2.171 2.177 2.183 2.188 2.194 2.2 2.206 2.212 2.217 2.223 2.229 2.235 2.241 2.247 2.252 2.258 2.264 2.27 2.276 2.281 2.287 2.293 2.299 2.305 2.31 2.316 2.322 2.328 2.334 2.339 2.345 2.351 2.357 2.363 2.368 2.374 2.38 2.386 2.392 2.397 2.403 2.409 2.415 2.421 2.426 2.432 2.438 2.444 2.45 2.455 2.461 2.467 2.473 2.479 2.485 2.49 2.496 2.502 2.508 2.514 2.519 2.525 2.531 2.537 2.543 2.548 2.554 2.56 2.566 2.572 2.577 2.583 2.589 2.595 2.601 2.606 2.612 2.618 2.624 2.63 2.635 2.641 2.647 2.653 2.659 2.664 2.67 2.676 2.682 2.688 2.694 2.699 2.705 2.711 2.717 2.723 2.728 2.734 2.74 2.746 2.752 2.757 2.763 2.769 2.775 2.781 2.786 2.792 2.798 2.804 2.81 2.815 2.821 2.827 2.833 2.839 2.844 2.85 2.856 2.862 2.868 2.873 2.879 2.885 2.891 2.897 2.902 2.908 2.914 2.92 2.926 2.932 2.937 2.943 2.949 2.955 2.961 2.966 2.972 2.978 2.984 2.99 2.995 3.001 3.007 3.013 3.019 3.024 3.03 3.036 3.042 3.048 3.053 3.059 3.065 3.071 3.077 3.082 3.088 3.094 3.1 3.106 3.111 3.117 3.123 3.129 3.135 3.14 3.146 3.152 3.158 3.164 3.17 3.175 3.181 3.187 3.193 3.199 3.204 3.21 3.216 3.222 3.228 3.233 3.239 3.245 3.251 3.257 3.262 3.268 3.274 3.28 3.286 3.291 3.297 3.303 3.309 3.315 3.32 3.326 3.332 3.338 3.344 3.349 3.355 3.361 3.367 3.373 3.378 3.384 3.39 3.396 3.402 3.408 3.413 3.419 3.425 3.431 3.437 3.442 3.448 3.454 3.46 3.466 3.471 3.477 3.483 3.489 3.495 3.5 3.506 3.512 3.518 3.524 3.529 3.535 3.541 3.547 3.553 3.558 3.564 3.57 3.576 3.582 3.587 3.593 3.599 3.605 3.611 3.616 3.622 3.628 3.634 3.64 3.646 3.651 3.657 3.663 3.669 3.675 3.68 3.686 3.692 3.698 3.704 3.709 3.715 3.721 3.727 3.733 3.738 3.744 3.75 3.756 3.762 3.767 3.773 3.779 3.785 3.791 3.796 3.802 3.808 3.814 3.82 3.825 3.831 3.837 3.843 3.849 3.855 3.86 3.866 3.872 3.878 3.884 3.889 3.895 3.901 3.907 3.913 3.918 3.924 3.93 3.936 3.942 3.947 3.953 3.959 3.965 3.971 3.976 3.982 3.988 3.994 4.0 4.005 4.011 4.017 4.023 4.029 4.034 4.04 4.046 4.052 4.058 4.063 4.069 4.075 4.081 4.087 4.093 4.098 4.104 4.11 4.116 4.122 4.127 4.133 4.139 4.145 4.151 4.156 4.162 4.168 4.174 4.18 4.185 4.191 4.197 4.203 4.209 4.214 4.22 4.226 4.232 4.238 4.243 4.249 4.255 4.261 4.267 4.272 4.278 4.284 4.29 4.296 4.301 4.307 4.313 4.319 4.325 4.331 4.336 4.342 4.348 4.354 4.36 4.365 4.371 4.377 4.383 4.389 4.394 4.4 4.406 4.412 4.418 4.423 4.429 4.435 4.441 4.447 4.452 4.458 4.464 4.47 4.476 4.481 4.487 4.493 4.499 4.505 4.51 4.516 4.522 4.528 4.534 4.539 4.545 4.551 4.557 4.563 4.569 4.574 4.58 4.586 4.592 4.598 4.603 4.609 4.615 4.621 4.627 4.632 4.638 4.644 4.65 4.656 4.661 4.667 4.673 4.679 4.685 4.69 4.696 4.702 4.708 4.714 4.719 4.725 4.731 4.737 4.743 4.748 4.754 4.76 4.766 4.772 4.777 4.783 4.789 4.795 4.801 4.807 4.812 4.818 4.824 4.83 4.836 4.841 4.847 4.853 4.859 4.865 4.87 4.876 4.882 4.888 4.894 4.899 4.905 4.911 4.917 4.923 4.928 4.934 4.94 4.946 4.952 4.957 4.963 4.969 4.975 4.981 4.986 4.992 4.998 5.004 5.01 5.015 5.021 5.027 5.033 5.039 5.045 5.05 5.056 5.062 5.068 5.074 5.079 5.085 5.091 5.097 5.103 5.108 5.114 5.12 5.126 5.132 5.137 5.143 5.149 5.155 5.161 5.166 5.172 5.178 5.184 5.19 5.195 5.201 5.207 5.213 5.219 5.224 5.23 5.236 5.242 5.248 5.254 5.259 5.265 5.271 5.277 5.283 5.288 5.294 5.3 5.306 5.312 5.317 5.323 5.329 5.335 5.341 5.346 5.352 5.358 5.364 5.37 5.375 5.381 5.387 5.393 5.399 5.404 5.41 5.416 5.422 5.428 5.433 5.439 5.445 5.451 5.457 5.462 5.468 5.474 5.48 5.486 5.492 5.497 5.503 5.509 5.515 5.521 5.526 5.532 5.538 5.544 5.55 5.555 5.561 5.567 5.573 5.579 5.584 5.59 5.596 5.602 5.608 5.613 5.619 5.625 5.631 5.637 5.642 5.648 5.654 5.66 5.666 5.671 5.677 5.683 5.689 5.695 5.7 5.706 5.712 5.718 5.724 5.73 5.735 5.741 5.747 5.753 5.759 5.764 5.77 5.776 5.782 5.788 5.793 5.799 5.805 5.811 5.817 5.822 5.828 5.834 5.84 5.846 5.851 5.857 5.863 5.869 5.875 5.88 5.886 5.892 5.898 5.904 5.909 5.915 5.921 5.927 5.933 5.938 5.944)) (quote (250.17 126.044 125.908 126.044 148.503 148.503 148.503 296.568 296.568 296.555 296.525 296.308 296.116 296.116 296.133 296.269 296.269 296.226 296.201 296.193 296.14 296.185 296.185 296.185 296.177 296.164 295.988 295.988 295.953 295.953 295.92 147.902 147.894 147.894 137.094 110.461 110.461 110.744 110.777 110.777 110.777 110.742 332.041 332.033 332.033 332.033 332.027 332.007 331.998 331.998 332.033 332.038 332.043 332.038 331.883 331.883 331.857 331.832 331.751 331.585 331.294 110.374 110.234 110.234 164.842 164.861 197.006 197.038 393.777 393.777 393.668 393.557 393.456 393.358 393.19 393.177 393.19 393.171 393.24 393.24 393.28 393.384 393.418 393.418 393.435 393.435 393.451 393.507 393.608 393.751 393.799 393.799 131.323 131.323 131.32 131.692 152.818 154.163 197.465 197.609 197.865 197.939 198.085 198.085 198.083 198.044 198.024 197.988 197.968 197.968 197.813 197.813 197.786 197.786 197.748 197.716 197.543 196.83 132.931 132.713 132.931 164.265 164.265 147.295 147.245 147.295 147.245 120.04 113.001 120.04 239.118 239.121 239.154 239.243 239.243 119.453 119.441 119.441 119.647 119.741 120.113 120.365 120.658 125.48 125.48 125.622 133.092 265.429 266.045 266.449 266.792 266.913 267.142 267.163 267.227 267.227 267.306 267.38 267.397 267.444 267.46 267.486 267.521 267.547 267.581 267.588 267.592 267.592 267.539 267.539 267.505 267.417 134.079 134.079 134.079 112.424 112.214 111.904 111.904 131.729 131.729 131.38 131.268 131.38 131.856 131.856 131.594 130.721 130.659 130.573 130.659 131.814 132.919 132.729 132.919 197.694 197.694 197.428 197.226 196.974 196.065 132.458 131.261 131.123 127.319 127.319 126.358 126.062 126.062 126.062 127.988 126.111 126.111 126.111 239.21 239.227 239.227 239.227 239.216 239.216 239.189 239.019 238.947 238.947 239.031 239.189 239.258 239.267 239.404 239.704 239.704 239.943 252.968 252.968 252.967 252.967 252.992 252.992 252.978 252.975 252.973 252.975 252.988 252.988 253.096 252.93 133.503 128.537 128.537 128.537 156.489 197.76 197.962 197.962 198.048 198.048 198.04 198.04 197.962 197.962 197.872 197.872 197.879 197.903 197.903 197.881 197.819 197.786 197.779 197.765 197.748 197.727 197.701 197.666 197.615 197.547 197.47 197.463 197.426 197.283 197.092 197.02 131.572 123.411 107.503 107.503 196.297 196.297 195.677 194.963 153.552 149.34 149.34 152.225 199.898 200.471 243.053 243.053 242.659 197.467 242.659 245.814 245.814 245.796 245.796 245.796 245.921 197.282 197.26 197.229 197.206 197.206 197.063 197.134 197.134 197.134 169.692 169.692 216.477 216.477 216.477 220.579 220.579 221.017 202.676 203.595 202.676 176.028 171.491 176.028 199.924 199.924 166.711 166.711 176.679 176.747 176.679 176.629 175.503 123.126 123.126 167.052 167.052 166.608 166.608 250.171 250.171 250.171 251.39 252.47 252.47 252.866 253.281 253.281 165.324 165.324 165.328 165.361 165.34 165.34 165.26 165.242 165.233 165.233 166.483 166.487 166.483 166.455 166.452 166.416 166.416 166.473 166.504 166.541 166.541 166.182 166.11 166.041 165.838 165.749 165.69 165.69 165.921 165.921 165.145 162.404 161.174 109.347 109.347 158.904 158.904 121.206 121.206 243.152 243.152 240.708 238.205 238.205 238.583 238.757 238.757 238.824 239.581 239.835 239.883 240.046 240.343 240.343 240.535 241.567 243.002 244.296 243.002 150.586 150.586 147.482 126.301 126.187 126.301 126.363 126.548 126.563 126.691 126.691 138.949 141.413 141.578 141.413 126.793 126.793 126.179 126.799 126.179 139.255 139.255 157.675 157.675 157.799 157.597 104.742 104.742 104.742 104.679 104.432 104.432 104.436 104.715 104.718 104.718 104.725 104.736 313.29 313.331 313.331 104.394 104.394 104.387 104.384 104.384 104.4 104.4 104.4 104.398 104.398 104.398 104.771 104.771 104.771 104.386 104.386 104.389 104.807 104.807 104.878 157.588 157.588 157.521 157.439 157.439 157.18 156.923 156.148 156.043 155.704 154.997 154.525 154.328 135.384 127.959 127.959 163.961 163.961 164.104 170.427 170.427 163.901 132.836 132.107 132.107 132.107 132.063 131.984 131.776 125.378 118.739 118.739 118.925 119.32 119.323 119.385 119.386 119.386 119.096 119.064 119.064 119.35 119.35 119.344 119.344 119.349 148.463 148.283 148.298 148.298 295.453 295.472 295.639 295.639 148.427 148.427 295.795 295.795 295.748 295.748 148.34 295.82 148.276 148.397 148.397 148.405 296.092 296.124 296.092 296.063 148.45 148.45 295.991 295.991 295.981 295.981 296.101 296.284 296.284 148.572 148.572 296.102 296.102 148.763 148.763 296.102 296.102 296.086 296.046 296.019 296.019 296.091 296.099 296.099 295.92 295.92 295.888 148.753 148.753 296.013 296.014 296.013 296.014 295.997 295.997 295.815 295.815 295.95 295.95 295.921 295.895 295.894 295.894 148.762 148.762 295.944 295.952 295.952 295.949 295.941 295.627 295.627 295.806 295.814 295.814 295.794 295.779 295.779 295.774 148.883 148.577 148.577 148.577 120.192 119.896 119.6 119.6 120.134 120.134 105.408 105.408 104.557 104.605 104.605 104.759 104.851 104.851 105.03 105.03 110.595 110.613 110.716 116.452 116.477 116.564 130.141 130.141 123.075 123.075 130.838 130.932 131.128 130.932 130.753 130.753 392.162 392.162 392.019 391.775 391.338 390.933 195.488 195.427 123.802 123.57 123.585 123.577 123.585 123.577 109.141 109.141 109.184 109.416 109.447 109.477 109.891 111.296 198.301 198.301 198.124 164.535 147.184 104.94 104.94 110.782 110.782 109.63 109.63 109.96 109.96 109.841 104.862 104.862 105.01 131.746 131.746 131.746 529.059 529.059 528.249 526.956 525.948 525.921 525.898 525.892 525.85 525.798 525.736 525.678 525.603 525.561 525.561 525.475 525.339 525.175 524.949 524.949 527.137 527.137 116.51 116.51 116.59 116.608 116.757 155.474 466.545 466.545 466.545 466.517 466.498 466.373 466.373 466.379 466.444 466.652 466.728 466.804 466.899 466.97 467.022 467.067 467.117 467.176 467.245 467.245 155.738 117.259 117.259 117.523 117.586 131.241 131.499 175.405 175.405 105.29 105.29 105.299 105.299 105.278 105.278 546.456 549.682 550.733 555.157 555.317 555.317 555.39 555.501 555.501 555.448 555.398 555.342 555.279 555.194 555.02 542.815 542.067 133.482 116.654 116.654 116.633 116.586 116.633 116.586 131.148 466.235 466.313 466.421 466.449 466.487 466.542 466.588 466.613 466.613 466.51 466.51 466.51 155.851 155.851 155.851 129.924 129.924 129.199 130.278 131.739 131.762 131.762 526.313 526.313 526.184 526.059 525.987 525.84 525.695 525.681 525.695 526.418 526.418 525.421 525.375 525.352 525.352 525.378 525.434 525.434 117.153 117.153 117.162 117.228 468.412 468.478 468.853 469.001 469.001 469.099 469.971 470.331 470.331 117.614 117.614 117.681 117.968 117.968 117.968 131.524 131.828 131.828 131.828 394.583 394.598 394.598 394.681 394.686 394.686 394.29 394.202 394.202 393.623 197.515 131.39 131.308 131.308 122.22 117.031 117.031 351.542 351.715 351.769 351.86 351.951 351.951 351.967 352.01 352.01 117.555 117.555 117.573 117.732 117.74 123.869 146.201 147.693 148.117 148.994 149.68 149.694 299.111 299.111 299.061 299.048 298.879 298.879 298.851 298.649 298.341 298.282 297.974 297.974 297.974 149.537 133.673 133.274 133.526 133.331 133.374 133.331 116.583 116.583 132.848 132.848 132.788 126.465 126.342 126.465 126.296 126.441 126.441 126.441 133.268 134.275 134.275 126.033 125.93 125.867 125.867 252.09 252.09 252.03 251.963 251.514 251.411 251.12 250.939 250.501 250.501 266.004 266.004 133.034 133.027 133.027 133.533 133.549 280.805 281.469 281.75 282.235 282.373 282.419 282.498 282.498 282.429 282.352 282.274 282.051 281.977 281.778 281.719 281.719 281.576 281.413 281.33 140.234 110.578 110.429 110.452 110.452 110.483 331.191 331.191 331.191 330.938 330.938 331.197 331.242 331.242 330.817 329.86 329.559 329.234 328.81 328.513 109.745 109.695 109.695 109.695 110.131 109.618 107.911 107.911 110.581 140.68 141.044 141.044 140.48 140.33 140.33 281.459 281.582 281.793 281.793 281.663 280.902 279.551 279.03 133.449 133.093 132.809 132.709 132.6 132.494 132.206 130.848 126.468 126.105 125.95 125.87 125.829 125.705 125.829 125.501 125.501 125.474 125.461 119.483 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil t) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 197 486) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 181 418) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 162 304) (om-make-point 64 34) "1FQ0" "\"1FQ0\"" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 125 307) (om-make-point 28 34) 0 "0" nil) (om-load-boxcall (quote genfun) "GETSDIFDATA" (quote getsdifdata) (quote ((om-load-inputfun (quote input-funbox) "sdif file" "SELF" nil) (om-load-inputfun (quote input-funbox) "stream number (int)" "SID" 0) (om-load-inputfun (quote input-funbox) "frame type (string)" "FRAMETYPE" "") (om-load-inputfun (quote input-funbox) "matrix type (string)" "MATTYPE" "") (om-load-inputfun (quote input-funbox) "field number (int or list)" "CNUM" 0) (om-load-inputfun (quote input-funbox) "min row" "RMIN" nil) (om-load-inputfun (quote input-funbox) "max row" "RMAX" nil) (om-load-inputfun (quote input-funbox) "min time (s)" "TMIN" nil) (om-load-inputfun (quote input-funbox) "max time (s)" "TMAX" nil))) (om-make-point 63 343) (om-make-point 370 64) nil "&" nil 2) (om-load-editor-box1 "guitar.aif" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 25 67) (om-make-point 182 75) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "bresson" "FILES" "sound")) :device nil :host nil :name "guitar" :type "aif") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "guitar.aif") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudiostream) 1 nil 1000 0 (om-make-point 704 308) (om-make-point 400 22) 0 1 (quote t) nil)) t nil nil nil) (om-load-boxcall (quote genfun) "F0-ESTIMATE" (quote f0-estimate) (quote ((om-load-inputfun (quote input-funbox) "" "INFILE" nil) (om-load-inputkeyword (quote input-keyword) "" "fund-minfreq" (quote :fund-minfreq) 50.0 nil) (om-load-inputkeyword (quote input-keyword) "" "out" (quote :out) "f0.sdif" nil))) (om-make-point 195 146) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 82 34) (quote "SDIFFILE") "" (om-make-point 93 244) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "myspecificfile.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 183 234) (om-make-point 139 58) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "myspecificfile" :type "sdif")))) (when newobj) newobj) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 107 260) (om-make-point 1353 302))) t nil nil nil))) (quote ((4 0 3 0 nil 0) (19 0 20 0 nil 0) (24 0 22 1 nil 0) (23 0 22 2 nil 0) (26 1 23 0 nil 0) (26 2 24 0 nil 0) (29 0 26 0 nil 0) (25 0 26 1 nil 0) (30 0 29 0 nil 0) (41 0 30 0 nil 0) (28 0 30 1 nil 0) (28 0 30 2 nil 0) (37 1 32 1 nil 0) (33 0 32 2 nil 0) (31 0 32 3 nil 0) (34 0 33 0 nil 0) (37 0 34 0 nil 0) (41 0 37 0 nil 0) (36 0 37 1 nil 0) (35 0 37 2 nil 0) (35 0 37 3 nil 0) (0 0 37 4 nil 0) (38 0 39 0 nil 0) (21 0 39 1 nil 0) (19 0 39 2 nil 0) (39 0 41 0 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name nil :source (quote nil) :pict-pathname (restore-pict-path (restore-path nil)) :thepict nil :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs (list (list (quote rect) (list 38/927 7/173 902/927 167/173) (list (om-make-color 0.83702416 0.9566601 0.6722229) 1 (quote line) (quote t)) nil))))) (setf (pict-pos newpict) (om-make-point 721 35)) (setf (pict-size newpict) (om-make-point 526 230)) newpict)) 6.070001))
